{
  "openapi": "3.0.1",
  "info": {
    "title": "Public API",
    "description": "ICAD Sistemi Public API documentation",
    "version": "1.0.6",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://mxp-public-api.prod.icadsistemi.com",
      "description": "Production"
    }
  ],
  "paths": {
    "/v1/appliedPrices": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/appliedPriceInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/appliedPrices/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appliedPriceOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/appliedPriceInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/articles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/articles/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/articles/search": {
      "get": {
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuel_station_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "card_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicle_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardInputArray"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cardOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards/{id}/unlock/history": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cardUnlockHistoryOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards/lock": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardLockInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards/range": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardRangeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/cards/pin/online": {
      "parameters": [],
      "get": {
        "summary": "",
        "operationId": "get-v1-cards-pin-seeds---copy",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cards": {
                      "type": "array",
                      "x-stoplight": {
                        "id": "axye68tute9ll"
                      },
                      "items": {
                        "x-stoplight": {
                          "id": "u9lx7f0lg5m9s"
                        },
                        "type": "object",
                        "properties": {
                          "pan": {
                            "type": "string",
                            "x-stoplight": {
                              "id": "pvwqvv01c1fbd"
                            }
                          },
                          "number": {
                            "type": "integer",
                            "x-stoplight": {
                              "id": "mdpxb4gw9ey14"
                            },
                            "description": "Card number"
                          },
                          "vehicle_plate": {
                            "type": "string",
                            "x-stoplight": {
                              "id": "8sxw161z2lzyr"
                            },
                            "description": "Optional vehicle plate"
                          }
                        },
                        "required": [
                          "pan",
                          "number"
                        ]
                      }
                    }
                  },
                  "required": [
                    "cards"
                  ]
                }
              }
            }
          }
        },
        "description": "Endpoint used to retrieve the list of the card linked to the logged user with the online dynamic pin enabled."
      },
      "post": {
        "summary": "",
        "operationId": "post-v1-cards-pin-online",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pin": {
                      "type": "string",
                      "x-stoplight": {
                        "id": "o5ankg8ths3mn"
                      },
                      "description": "Temporary pin"
                    }
                  },
                  "required": [
                    "pin"
                  ]
                }
              }
            }
          }
        },
        "description": "Endpoint used to get the online temporary pin ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "card_pan": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "64f6puiv8zh3z"
                    },
                    "description": "Pan of the card requesting the pin"
                  }
                },
                "required": [
                  "card_pan"
                ]
              }
            }
          }
        }
      }
    },
    "/v1/cards/pin/seeds": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "replace": {
                    "type": "boolean",
                    "x-stoplight": {
                      "id": "bsh2rbfv9b6pb"
                    },
                    "description": "Always set to False."
                  }
                },
                "required": [
                  "replace"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cards": {
                      "type": "array",
                      "x-stoplight": {
                        "id": "3zgo8myq18shh"
                      },
                      "items": {
                        "x-stoplight": {
                          "id": "d30wl9otubshm"
                        },
                        "type": "object",
                        "properties": {
                          "totp_seed": {
                            "type": "string",
                            "x-stoplight": {
                              "id": "10lntw48bel5e"
                            },
                            "description": "Seed to be used for the paired pan"
                          },
                          "pan": {
                            "type": "string",
                            "x-stoplight": {
                              "id": "5cy29qy0kfsfs"
                            },
                            "description": "Pan of the card"
                          },
                          "number": {
                            "type": "integer",
                            "x-stoplight": {
                              "id": "x59wld843vaj3"
                            },
                            "description": "Card number"
                          },
                          "vehicle_plate": {
                            "type": "string",
                            "x-stoplight": {
                              "id": "gksdidz948jnn"
                            },
                            "description": "Optional vehicle plate"
                          }
                        },
                        "required": [
                          "totp_seed",
                          "pan",
                          "number"
                        ]
                      }
                    }
                  },
                  "required": [
                    "cards"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ],
        "description": "Endpoint used to retrieve the list of the card linked to the logged user with the offline dynamic pin enabled."
      },
      "parameters": []
    },
    "/v1/cards/unlock": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardUnLockInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/categories": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/categoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/categories/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/categoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/categories/{id}/articles": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/circuits": {
      "get": {
        "parameters": [
          {
            "name": "supplier_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/circuitOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/circuitOutputArray"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/intents": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/{id}/intents": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/{id}/qr": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/{id}/vehicles": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vehicleOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/intents/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/qr/email": {
      "post": {
        "responses": {
          "202": {
            "description": "202 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/customers/search": {
      "get": {
        "parameters": [
          {
            "name": "db_only",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fiscal_code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelcoupons/{id}/unlock/history": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelcouponUnlockHistoryOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations": {
      "get": {
        "parameters": [
          {
            "name": "source_app",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationsOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fuelStationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations/{id}": {
      "get": {
        "parameters": [
          {
            "name": "isQr",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fuelStationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations/{id}/invoiceheaders": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceHeaderOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/invoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations/{id}/prices/applied": {
      "get": {
        "parameters": [
          {
            "name": "article_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price_level_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appliedPriceOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations/search/prices/applied/mise": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fuelstationMisePricesOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/fuelstations/search": {
      "get": {
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "articles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activeInvoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activeInvoiceAcceptRejectInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active/{id}/details/restore": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "202 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patchActiveInvoiceHeaderOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activeInvoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchActiveInvoiceInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active/{id}/details": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceBodyOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active/{id}/details/{detailid}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detailid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceBodyOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/active/search": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/activeInvoiceHeaderOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/{id}/print": {
      "get": {
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preview",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/base64String"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoices/passive": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/passiveInvoiceHeaderOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passiveInvoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/invoiceheaders/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceHeaderOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/invoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/mobilepayments/transactions/enable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enableFuelingOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/mobilepayments/fuelstations/{id}/map": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationMapOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/mobilepayments/fuelstations/{id}/pump": {
      "get": {
        "parameters": [
          {
            "name": "pump_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationMapOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/payments/modes": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentModeOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/payments/periodicities": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentPeriodicityOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/payments/terms": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentTermsOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ],
        "description": "Get user payment terms"
      }
    },
    "/v1/productfamilies": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productFamilyOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productFamilyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/protocols": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protocolInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/protocols/{id}": {
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protocolInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/residues/cards": {
      "get": {
        "parameters": [
          {
            "name": "type_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "card_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/residueCardsOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/residues/customers": {
      "get": {
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/residueCustomersOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/residues/fuelcoupons": {
      "get": {
        "parameters": [
          {
            "name": "fuelcoupon_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "supplier_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/residueFuelCouponsOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ],
        "operationId": "",
        "description": "Get fuel coupons residues"
      }
    },
    "/v1/residues/log": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplier_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/residueLogOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/selfnet/home": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/supplierInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}/categories": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}/invoiceheaders": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceHeaderOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/invoiceHeaderInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ],
        "summary": ""
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/supplierInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}/cards": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cardOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}/fuelstations": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/suppliers/{id}/protocols": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protocolOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/supplies/nonoil": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/manualSupplyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/supplies/oil": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/manualSupplyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/supplies/search": {
      "get": {
        "parameters": [
          {
            "name": "dispenser_number",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuel_station_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receipt_number",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rows",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplyOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/supplies/search/qr": {
      "post": {
        "summary": "",
        "operationId": "post-v1-supplies-search-qr",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplyOutputArray"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getTransactionDetailByQrInput"
              }
            }
          },
          "description": ""
        }
      }
    },
    "/v1/transactions": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionPaymentOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionPaymentOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/transactions/search": {
      "get": {
        "parameters": [
          {
            "name": "computer_station_tran_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuel_station_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/dbcreate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userEnableInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v1/users/confirm/resend": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userEnableInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/customer/{id}": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/enable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userEnableInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/{id}": {
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ],
        "operationId": "delete-v1-users-id",
        "description": ""
      },
      "get": {
        "summary": "",
        "operationId": "get-v1-users-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userOutput"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/me": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/search": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/{id}/fuelstations": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fuelStationOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          }
        }
      }
    },
    "/v1/users/{id}/vehicles": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vehicleOutputArray"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/users/promote": {
      "parameters": [],
      "post": {
        "summary": "",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userPromoteInput"
              }
            }
          }
        }
      }
    },
    "/v1/users/terms": {
      "get": {
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userPrivacy"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userPrivacy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/vehicles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vehicleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/vehicles/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "article_id",
            "description": "The article id used to filter vehicles of this customer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vehicleOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vehicleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "422": {
            "description": "422 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/vehicles/{id}/qr": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vehicleOutput"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "404": {
            "description": "404 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/vehicles/{id}/qr/email": {
      "post": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "202 response",
            "content": {}
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        },
        "security": [
          {
            "cognito": []
          }
        ]
      }
    },
    "/v1/versions": {
      "get": {
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/version"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {}
          },
          "401": {
            "description": "401 response",
            "content": {}
          },
          "403": {
            "description": "403 response",
            "content": {}
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        }
      }
    },
    "/v1/managers/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-managers-id",
        "description": "get manager datail by id"
      }
    },
    "/v1/managers": {
      "post": {
        "summary": "",
        "operationId": "post-v1-managers",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "add or modify manager ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertManagers"
              }
            }
          }
        }
      }
    },
    "/v1/managers/accounts/statements": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-managers-accounts-statements",
        "description": "get list of articles from supplier_id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "supplier_id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "start_datetime",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "end_datetime",
            "required": true
          }
        ]
      }
    },
    "/v1/managers/{id}/fuelstations": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-managers-id-fuelstations",
        "description": "get all fuelstations from the managerId"
      },
      "post": {
        "summary": "",
        "operationId": "post-v1-managers-id-fuelstations",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertManagerFuelstations"
              }
            }
          },
          "description": ""
        },
        "description": "add or modify fuelstation from selected managerId"
      }
    },
    "/v1/managers/fuelstations/{fuelstation_id}/articles": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "fuelstation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-managers-fuelstations-manager_fuelstation_id-articles",
        "description": "get all articles from the fuelstationId"
      },
      "post": {
        "summary": "",
        "operationId": "post-v1-managers-fuelstations-manager_fuelstation_id-articles",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertManagerFuelstationArticles"
              }
            }
          }
        },
        "description": "add or modify article from selected managerFuelstationId"
      }
    },
    "/v1/tanks/reconciliations/configuration": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-tanks-reconciliations-configuration",
        "description": "get list of tanks of supplier_id selected",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "supplier_id"
          }
        ]
      },
      "post": {
        "summary": "",
        "operationId": "post-v1-tanks-reconciliations-configuration",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertTanksReconciliationsConfiguration"
              }
            }
          }
        },
        "description": "add or modify tanks configurations"
      }
    }
  },
  "components": {
    "schemas": {
      "appliedPriceOutputArray": {
        "title": "applied_price_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "article_id": {
              "type": "integer",
              "description": "Article id referred by this price"
            },
            "fuel_station_id": {
              "type": "integer",
              "description": "Involved fuel station id"
            },
            "price_level_id": {
              "type": "integer",
              "description": "Price level id (attended, unattended, self, ...)"
            },
            "start_datetime": {
              "type": "string",
              "description": "The price is applied after this datetime",
              "format": "date-time"
            },
            "article_name": {
              "type": "string",
              "description": "Name of the article referred by this price"
            },
            "id": {
              "type": "integer",
              "description": "Unique applied_price identifier"
            },
            "unit_price": {
              "type": "number",
              "description": "Applied unit price"
            },
            "price_level_name": {
              "type": "string",
              "description": "Price level name (attended, unattended, self, ...)"
            }
          }
        }
      },
      "userEnableInput": {
        "title": "user_enable_input",
        "type": "object",
        "properties": {
          "sourceApp": {
            "type": "string",
            "description": "optional source app of the request",
            "format": "selfnet"
          },
          "email": {
            "type": "string",
            "description": "email address of to user enable",
            "format": "email"
          }
        },
        "description": "User enable input"
      },
      "userPromoteInput": {
        "title": "user_enable_input",
        "type": "object",
        "description": "User promote input",
        "x-stoplight": {
          "id": "d351f7f2728cc"
        },
        "properties": {
          "sourceApp": {
            "type": "string",
            "description": "optional source app of the request",
            "format": "selfnet"
          },
          "email": {
            "type": "string",
            "description": "email address of to user to promote",
            "format": "email"
          }
        }
      },
      "fuelcouponUnlockHistoryOutputArray": {
        "title": "fuelcoupon_unlock_history_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "lock_datetime": {
              "type": "string",
              "description": "Datetime of lock event",
              "format": "date-time"
            },
            "fuelcoupon_id": {
              "type": "integer",
              "description": "Unique fuelcoupon identifier"
            },
            "unlock_fuelstation_code": {
              "type": "string",
              "description": "Fuelstation code where unlock event happened"
            },
            "unlock_datetime": {
              "type": "string",
              "description": "Datetime of unlock event",
              "format": "date-time"
            },
            "fuelcoupon_number": {
              "type": "integer",
              "description": "Fuelcoupon number"
            },
            "unlock_fuelstation_name": {
              "type": "string",
              "description": "Fuelstation name where unlock event happened"
            },
            "id": {
              "type": "integer",
              "description": "Unique fuelcoupon unlock event identifier"
            },
            "lock_fuelstation_code": {
              "type": "string",
              "description": "Fuelstation code where lock event happened"
            },
            "lock_fuelstation_name": {
              "type": "string",
              "description": "Fuelstation name where lock event happened"
            },
            "username": {
              "type": "string",
              "description": "Username that requested unlock on fuelcoupon"
            }
          }
        }
      },
      "patchActiveInvoiceInput": {
        "title": "patch_active_invoice_invoice_input",
        "type": "object",
        "properties": {
          "causal": {
            "type": "string",
            "description": "Causal of the invoice. Cannot be empty.."
          }
        },
        "description": "Patch active invoice input"
      },
      "vehicleOutput": {
        "title": "vehicle_output",
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "True if vehicle is active, false otherwise."
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "driver": {
            "type": "string",
            "description": "Vehicle's driver identifier"
          },
          "plate": {
            "type": "string",
            "description": "Vehicle's plate"
          },
          "model": {
            "type": "string",
            "description": "Vehicle's model"
          },
          "id": {
            "type": "integer",
            "description": "Unique vehicle identifier"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer owner of the vehicle"
          }
        },
        "description": "Vehicle data output"
      },
      "userOutput": {
        "title": "user_output",
        "type": "object",
        "description": "User data output",
        "properties": {
          "user_role": {
            "type": "integer",
            "description": "For Invoice&GO customer users, its value is <strong>0 for master users</strong> and <strong>1 for sub users</strong>."
          },
          "is_customer_iego": {
            "type": "boolean",
            "description": "True if the linked customer is an Invoice&GO customer, false otherwise"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          },
          "id": {
            "type": "integer",
            "description": "Unique user identifier"
          },
          "customer_id": {
            "type": "integer",
            "description": "Optional customer id linked to this user"
          },
          "vehicle_id": {
            "type": "integer",
            "description": "Used to assign one specific vehicle to this user. When this is set, the user can use only this vehicle in Invoice&GO"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Optional supplier id linked to the customer"
          },
          "email": {
            "type": "string",
            "description": "Login email",
            "format": "email"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "True if user is active, false otherwise"
              },
              "father_user_id": {
                "type": "integer",
                "description": "User who created this user"
              },
              "identity_provider_id": {
                "type": "integer",
                "description": "Id assigned from the identity provider"
              },
              "user_level_id": {
                "type": "integer",
                "description": "Level of the user"
              }
            }
          },
          "enabled_services": {
            "type": "array",
            "x-stoplight": {
              "id": "nfz5hm95rnuux"
            },
            "description": "Active services for the user:\n\"iego\" stands for Invoice&GO\n\"dynamic_pin\" stands for offline dynamic pin\n\"online_pin\" stands for online dynamic pin",
            "items": {
              "x-stoplight": {
                "id": "1msc3bvek3ocn"
              },
              "type": "string"
            }
          }
        }
      },
      "customerInput": {
        "title": "customer_input",
        "type": "object",
        "properties": {
          "invoice_notes": {
            "type": "string",
            "description": "Invoice custom notes"
          },
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "notify_recharge": {
            "type": "boolean",
            "description": "True if the system sends an email to the customer to notify a recharge operation, false otherwise"
          },
          "fee": {
            "type": "boolean",
            "description": "ECommerce customer fee"
          },
          "discount_level": {
            "type": "integer",
            "description": "Customer discount level"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "max_period_credit": {
            "type": "number",
            "description": "Max credit"
          },
          "charge_discount": {
            "type": "number",
            "description": "Discount amount for recharging operations"
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "has_driver_request": {
            "type": "boolean",
            "description": "True if the customer has to type the driver code when performing a transaction, false otherwise"
          },
          "ignore_payment_mode_on_pos": {
            "type": "boolean",
            "description": "If true ignores customer payment mode for POS recharges"
          },
          "vat_id": {
            "type": "integer",
            "description": "Customer vat"
          },
          "oil_iban": {
            "type": "string",
            "description": "If not empty, oil invoices uses this iban if needed"
          },
          "has_driver_check": {
            "type": "boolean",
            "description": "True if the system check the driver code (it has to be an authorizative PIN), false otherwise"
          },
          "app_can_see_balance": {
            "type": "boolean",
            "description": "True if in the Selfnet mobile app user can see the customer credit, false otherwise"
          },
          "merge_invoices": {
            "type": "boolean",
            "description": "If True, OIL and NON OIL invoices are merged (where possible), false otherwise"
          },
          "is_without_vat": {
            "type": "boolean",
            "description": "If True, the customer has no VAT number"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "card_type_id": {
                "type": "integer",
                "description": "Only for Selfnet GT cards customers, shows the owner circuit.<br/>Possible valuesa are: <ul><li> 9 DKV</li><li>10 UTA</li><li>13 EWG</li><li>39 FAI</li><li>42 EDC (RADIUS)</li></ul>"
              },
              "registration_date": {
                "type": "string",
                "description": "Customer's registration date in the system",
                "format": "date-time"
              },
              "parent_id": {
                "type": "integer",
                "description": "Parent client ID reverse change management"
              },
              "associated_supplier_id": {
                "type": "integer",
                "description": "For multisupplier, linked supplier"
              },
              "is_external_customer": {
                "type": "boolean",
                "description": "True if the customer is created by API called by third parties. Only used in GET endpoints"
              },
              "is_exported": {
                "type": "boolean",
                "description": "True if the customer is created and still never exported, false otherwise"
              },
              "type": {
                "type": "string",
                "description": "Customer type -> 'S': Society, 'P': Private"
              }
            }
          },
          "residue_type": {
            "type": "integer",
            "description": "Shows on the receipt card or customer residue"
          },
          "stamp_duty": {
            "type": "boolean",
            "description": "If true invoices have stamp duty when numbers permits it"
          },
          "exposure": {
            "type": "number",
            "description": "Issued invoices still not payed"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "sdi_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "SDI code used to receive electronic invoices"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of customer data (not set for I&GO customers)"
          },
          "discount_group_id": {
            "type": "integer",
            "description": "Discount group identifier"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          },
          "non_oil_iban": {
            "type": "string",
            "description": "If not empty, non oil invoices uses this iban if needed"
          },
          "birthday": {
            "type": "string",
            "description": "Customer birthday date",
            "format": "date-time"
          },
          "notify_2": {
            "type": "boolean",
            "description": "True if the system sends an email to secondary customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "notify_3": {
            "type": "boolean",
            "description": "True if the system sends an email to third customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "gender": {
            "type": "string",
            "description": "Customer gender"
          },
          "has_customer_recharge": {
            "type": "boolean",
            "description": "True if the recharge operations increase the customer credit,False if they increase the credit of the single involved card."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "notify_1": {
            "type": "boolean",
            "description": "True if the system sends an email to main customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "nexi_configuration": {
            "type": "string",
            "description": "ECommerce configuration"
          },
          "notify": {
            "type": "boolean",
            "description": "True if the system sends an email to the customer to notify his operations, false otherwise"
          },
          "article_id": {
            "type": "integer",
            "description": "Article id to add costs to the customer invoice"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if customer is active, false otherwise"
          },
          "has_account_balance": {
            "type": "boolean",
            "description": "True if the system generates the account balance for this customer, false otherwise"
          },
          "enabled_vehicles": {
            "type": "array",
            "description": "Enabled vehicles ids, lookup for vehicle details using /vehicles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "electronic_invoice": {
            "type": "boolean",
            "description": "True if the customer use the ICAD Sistemi electronic invoice"
          },
          "start_invoice_date": {
            "type": "string",
            "description": "For Selfnet customer, represents the electronic invoice starting dateIf NULL, invoices start when the field electronic_invoice is activated",
            "format": "date"
          },
          "payment_terms_id": {
            "type": "integer",
            "description": "Payment terms identifier. It is used only for Selfnet customers<br/> Possible values are:<ul><li>2\t5 gg data fattura</li><li>3\t15 gg data fattura</li><li>4\t30 gg fine mese data fattura</li><li>5\t60 gg fine mese data fattura</li><li>6\t90 gg fine mese data fattura</li><li>22\tData Fattura</li><li>23\t25 gg data fattura</li><li>26\t30 gg data fattura</li><li>27\t45 gg data fattura</li><li>28\t35 gg data fattura</li><li>29\t40 gg data fattura</li><li>30\t60 gg fine mese + 12gg</li><li>31\t30 gg fine mese + 12gg</li><li>32\t20 gg data fattura</li><li>33\t30 gg fine mese +  8gg</li><li>34\t60 gg fine mese + 10gg</li><li>35\t30 gg fine mese +  5gg</li><li>36\t30 gg fine mese + 10gg</li><li>37\t60 gg fine mese + 15gg</li><li>38\t10 gg data fattura</li><li>39\t30 gg fine mese + 15gg</li><li>40\t60 gg fine mese +  5gg</li><li>41\t60 gg data fattura</li><li>42\t90 gg fine mese + 10gg</li><li>43\t90 gg data fattura</li></ul>"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "payment_mode_id": {
            "type": "string",
            "description": "Payment mode identifier.<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
          },
          "has_km_request": {
            "type": "boolean",
            "description": "True if the customer has to type the km value when performing a transaction, false otherwise"
          },
          "has_invoice": {
            "type": "boolean",
            "description": "True if the customer needs to invoice his transactions, false otherwise"
          },
          "has_km_check": {
            "type": "boolean",
            "description": "True if the system check the value of the field has_km_request, false otherwise"
          },
          "price_list_id": {
            "type": "integer",
            "description": "Price list identifier linked to this customer"
          },
          "payment_periodicity_id": {
            "type": "string",
            "description": "Payment periodicity identifier.<br/>Possible values are:<ul><li><strong>N</strong> Immediata (both for Invoice&GO and Selfnet customers)</li><li><strong>W</strong> Settimanale (only for Selfnet customers)</li><li><strong>D</strong> \tDecade (only for Selfnet customers)</li><li><strong>F</strong> \tQuindicinale (only for Selfnet customers)</li><li><strong>M</strong> \tMensile (both for Invoice&GO and Selfnet customers)</li><li><strong>B</strong> \tBimestrale (only for Selfnet customers)</li><li><strong>Q</strong> \tTrimestrale (only for Selfnet customers)</li><li><strong>X</strong> \tNessuna (only for Selfnet customers)</li></ul>"
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "has_split_payment": {
            "type": "boolean",
            "description": "True if the customer use the split payment, false otherwise"
          }
        },
        "description": "Customer input data"
      },
      "activeInvoiceHeaderOutputArray": {
        "title": "active_invoice_header_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "is_immediate": {
              "type": "boolean",
              "description": "True if the invoice is issued with immediate periodicity, false otherwise"
            },
            "status_code": {
              "type": "string",
              "description": "Current status id of the invoice<br/>Possible values are:<ul><li><strong>SF01</strong> Inserita dal cliente (SF01)</li><li><strong>SF02</strong> Validata dal gestore (SF02)</li><li><strong>SF03</strong> Inviata\t(SF03)</li><li><strong>SF04</strong> Errore\t(SF04)</li><li><strong>SF05</strong> Consegnata (SF05)</li><li><strong>SF07</strong> Scartata (SF07)</li><li><strong>SF08</strong> Accettata dal destinatario (SF08)</li><li><strong>SF09</strong> Rifiutata dal destinatario (SF09)</li><li><strong>SF010</strong> \tAccettata automaticamente (SF10)</li><li><strong>SF011</strong> \tNon consegnata (definitivo) (SF11)</li><li><strong>SF012</strong> \tRifiutata manualmente (SF12)</li></ul>"
            },
            "fuel_station_id": {
              "type": "integer",
              "description": "Optional reference to the fuel station where the invoice is created. If this is NULL, supplier_id must be set."
            },
            "sending_counter_hex": {
              "type": "string",
              "description": "Unique invoice counter, used in the invoice file name"
            },
            "error_info": {
              "type": "string",
              "description": "Error message, if available"
            },
            "year": {
              "type": "integer",
              "description": "Year when the invoice is issued"
            },
            "sending_datetime": {
              "type": "string",
              "description": "Date time when the invoice is scheduled for issuing",
              "format": "date-time"
            },
            "number": {
              "type": "string",
              "description": "Invoice number"
            },
            "fuel_station_city": {
              "type": "string",
              "description": "City of the involved fuel station (if present)"
            },
            "is_oil": {
              "type": "boolean",
              "description": "True if the invoice contains only oil transactions, false if it contains only non oil transactions. NULL if it contains both of them."
            },
            "fuel_station_full_address": {
              "type": "string",
              "description": "Concat of fuel_station_flag, fuel_station_name, fuel_station_address and fuel_station_city"
            },
            "fuel_station_cellphone_number": {
              "type": "string",
              "description": "Fuelstation mobile phone number (if present)"
            },
            "causal": {
              "type": "string",
              "description": "Invoice causal"
            },
            "details": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "transaction_id": {
                    "type": "string",
                    "description": "Transaction ID from station PC"
                  },
                  "km": {
                    "type": "integer",
                    "description": "Optional odometer value"
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Quantity of the purchased article"
                  },
                  "fuel_station_id": {
                    "type": "integer",
                    "description": "Optional fuel station id involved"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Transaction notes"
                  },
                  "discount_increase": {
                    "type": "number",
                    "description": "0 if there is no discount on the transaction's total amount. "
                  },
                  "payments": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number",
                          "description": "Amount payed with this payment method"
                        },
                        "payment_method_code": {
                          "type": "string",
                          "description": "Payment method code<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
                        }
                      }
                    }
                  },
                  "ddt_number": {
                    "type": "string",
                    "description": "DDT number associated to the transaction"
                  },
                  "transaction_timestamp": {
                    "type": "string",
                    "description": "Transaction datetime",
                    "format": "date-time"
                  },
                  "unit_price": {
                    "type": "number",
                    "description": "Unit price of the purchased article"
                  },
                  "detail_status_code": {
                    "type": "string",
                    "description": "Current status of this record. It can be SF01 (to be approved), SF02 (approved) or SF12 (manually rejected)"
                  },
                  "card_id": {
                    "type": "integer",
                    "description": "Optional card involved in this transaction"
                  },
                  "article_id": {
                    "type": "integer",
                    "description": "Purchased article id"
                  },
                  "receipt_number": {
                    "type": "string",
                    "description": "Associated ticket id"
                  },
                  "is_oil": {
                    "type": "boolean",
                    "description": "True if the transaction refers to OIL article, false otherwise"
                  },
                  "insert_invoice_mode_id": {
                    "type": "integer",
                    "description": "Identifies transaction's origin. Possibile values:<br/><ul><li>1: manual insert by manager</li><li>2: manual insert by the customer</li><li>3: from station PC</li><li>4: from Self, by customer with ticket number</li><li>: Selfnet transaction</li></ul>"
                  },
                  "total_amount": {
                    "type": "number",
                    "description": "Total gros amount of this transaction"
                  },
                  "image_data": {
                    "type": "string",
                    "description": "Optional attached receipt image"
                  },
                  "credit_note_detail_id": {
                    "type": "integer",
                    "description": "Optional credit note detail id (used when this transaction is reversed)"
                  },
                  "unit_of_measure": {
                    "type": "string",
                    "description": "Unit of measure used"
                  },
                  "id": {
                    "type": "integer",
                    "description": "Unique invoice detail identifier"
                  },
                  "decrement_total": {
                    "type": "boolean",
                    "description": "If true, decrements transaction amount from the total. False otherwise."
                  },
                  "vehicle_id": {
                    "type": "integer",
                    "description": "Vehicle ID"
                  }
                }
              }
            },
            "id": {
              "type": "integer",
              "description": "Unique invoice identifier"
            },
            "is_customer_split": {
              "type": "boolean",
              "description": "True if the customer is under split payment, false otherwise"
            },
            "payment_date": {
              "type": "string",
              "description": "The date when the invoice is payed by the customer (if payment scheduler is active)",
              "format": "date-time"
            },
            "sending_error": {
              "type": "boolean",
              "description": "True if during the first sending attempt, an error occured"
            },
            "issuing_datetime": {
              "type": "string",
              "description": "Date time when the invoice is issued",
              "format": "date-time"
            },
            "amount": {
              "type": "number",
              "description": "Total amount of the invoice"
            },
            "is_from_selfnet": {
              "type": "boolean",
              "description": "True if the invoice refers to Selfnet (invoice generated by cards), false otherwise (Invoice&GO invoices)"
            },
            "customer_payment_method": {
              "type": "string",
              "description": "Only for Selfnet invoices (not I&GO). It contains the name of the payment method used by the involved customer"
            },
            "discount_increase": {
              "type": "number",
              "description": "0 if there is no discount/increse on the invoice amount. The value is positive for an increase, negative for a discount."
            },
            "cost_center_id": {
              "type": "integer",
              "description": "Cost center optionally linked to the invoice"
            },
            "is_downloaded": {
              "type": "boolean",
              "description": "True if the invoice was downloaded with the massive donwload, false otherwise "
            },
            "is_electronically_stored": {
              "type": "boolean",
              "description": "True if the invoice is electronically stored, false otherwise"
            },
            "has_withholding": {
              "type": "boolean",
              "description": "True if the invoice has withholding, false otherwise"
            },
            "protocol_id": {
              "type": "integer",
              "description": "Optional procotol id assigned to this invoice"
            },
            "payment_date_expire": {
              "type": "string",
              "description": "The date when the invoice payment expires (if payment scheduler is active)",
              "format": "date-time"
            },
            "fuel_station_flag": {
              "type": "string",
              "description": "Flag of the involved fuel station (if present)"
            },
            "fuel_station_name": {
              "type": "string",
              "description": "Name of the involved fuel station (if present)"
            },
            "fuel_station_phone_number": {
              "type": "string",
              "description": "Fuelstation phone number (if present)"
            },
            "document_type_id": {
              "type": "string",
              "description": "Invoice type id.<br/>Possible values are:<ul><li><storng>TD01</strong>: Fattura immediata</li><li><storng>TD04</strong>: Nota di Credito</li><li><storng>TD17</strong>: Integrazione/autofattura per acquisto servizi dall’estero</li><li><storng>TD18</strong>: Integrazione per acquisto di beni intracomunitari</li><li><storng>TD19</strong>: Integrazione/autofattura per acquisto di beni ex art.17 c.2 DPR 633/72</li><li><storng>TD24</strong>: Fattura differita di cui all’art.21, comma 4, lett. a)</li><li><storng>TD27</strong>: Fattura per autoconsumo o per cessioni gratuite senza rivalsa</li></ul>"
            },
            "payment_notes": {
              "type": "string",
              "description": "Optional notes linked to the payment (if payment scheduler is active)"
            },
            "father_id": {
              "type": "integer",
              "description": "Reference to the optional invoice who generated this (used in case of credit note)"
            },
            "customer_id": {
              "type": "integer",
              "description": "Customer who is the recipient of the invoice"
            },
            "fuel_station_address": {
              "type": "string",
              "description": "Address of the involved fuel station (if present)"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Id of the supplier who owns the invoice. In an active invoice, if this is NULL, fuel_station_id must be set."
            },
            "user": {
              "type": "string",
              "description": "Username who created the invoice"
            }
          }
        }
      },
      "appliedPriceInput": {
        "title": "applied_price_input",
        "type": "object",
        "properties": {
          "article_id": {
            "type": "integer",
            "description": "Article id referred by this price"
          },
          "fuel_station_id": {
            "type": "integer",
            "description": "Involved fuel station id"
          },
          "price_level_id": {
            "type": "integer",
            "description": "Price level id (attended, unattended, self, ...)"
          },
          "start_datetime": {
            "type": "string",
            "description": "The price is applied after this datetime",
            "format": "date-time"
          },
          "unit_price": {
            "type": "number",
            "description": "Applied unit price"
          }
        },
        "description": "Applied price data input"
      },
      "fuelStationInput": {
        "title": "fuel_station_input",
        "type": "object",
        "properties": {
          "unattended_manual_insert": {
            "type": "boolean",
            "description": "True if after failing an attempt to retrieve data from the computer station, the user can proceed manually for an unattended transaction"
          },
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "disable_self_discount": {
            "type": "boolean",
            "description": "True if the self service customer discount is disabled, false otherwise"
          },
          "code": {
            "type": "string",
            "description": "Code assigned to the fuel station by the supplier"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "attended_is_receipt_number_mandatory": {
            "type": "boolean",
            "description": "True if the receipt number is mandatory for attended transactions"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the fuel station"
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "attended_is_photo_mandatory": {
            "type": "boolean",
            "description": "True if the receipt photo is mandatory for attended transactions"
          },
          "unattended_is_receipt_number_mandatory": {
            "type": "boolean",
            "description": "True if the receipt number is mandatory for unattended transactions"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "unattended_auto_retrieve_invoice_data": {
            "type": "boolean",
            "description": "True if this fuel station can retrieve data from the computer station for unattended transactions"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "unattended_is_photo_mandatory": {
            "type": "integer",
            "description": "This fields determines if the photo for unattened photos is mandatory. <br/>The possible values are:<ul><li>0: the photo is never mandatory</li><li>1: the photo is mandatory only for manual inserts</li><li>2: the photo is always mandatory</li></ul>"
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "unattended_default_status_id": {
            "type": "integer",
            "description": "Link to the default invoice status ('1' stands for 'approved' and '2' for 'to be approved') for unattended transactions"
          },
          "automation": {
            "type": "string",
            "description": "Identifies fuel station automation"
          },
          "attended_manual_insert": {
            "type": "boolean",
            "description": "True if after failing an attempt to retrieve data from the computer station, the customer can proceed manually for an attended transaction"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "manager_id": {
            "type": "integer",
            "description": "Id of the fuel station manager"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the fuel station"
          },
          "store_id": {
            "type": "string",
            "description": "Store id of the fuel station"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "attended_auto_retrieve_invoice_data": {
            "type": "boolean",
            "description": "True if this fuel station can retrieve data from the computer station for attended transactions"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_master": {
                "type": "boolean",
                "description": "True if this fuel station (in multisupplier configuration) is the master, false otherwise"
              },
              "total_sms": {
                "type": "integer",
                "description": "Total sms"
              },
              "invoice_header_id": {
                "type": "integer",
                "description": "Link with the invoice header data to be used"
              },
              "has_non_oil": {
                "type": "boolean",
                "description": "True if this fuel station has the non oil Selfnet invoicing, false otherwise"
              },
              "has_invoice": {
                "type": "boolean",
                "description": "True if this fuel station issues invoices without supplier header data, false otherwise (the header is read from the supplier)"
              },
              "has_pos_recharge": {
                "type": "boolean",
                "description": "True if the pos can perform recharging operations, false otherwise"
              },
              "protocol_id": {
                "type": "integer",
                "description": "Link to the protocol to be used in the invoices"
              },
              "total_email": {
                "type": "integer",
                "description": "Total emails"
              },
              "range_sms": {
                "type": "boolean",
                "description": "Settings for sending sms"
              },
              "is_enabled": {
                "type": "boolean",
                "description": "True if the fuel station is active, false otherwise"
              },
              "dispensers_count": {
                "type": "integer",
                "description": "Total count of the dispenser active in the fuel station"
              },
              "has_non_oil_invoice_and_go": {
                "type": "boolean",
                "description": "True if this fuel station has the non oil Invoice&GO invoicing, false otherwise"
              },
              "is_code": {
                "type": "string",
                "description": "ICAD Sistemi fuel station code"
              },
              "range_email": {
                "type": "boolean",
                "description": "Settings for sending emails"
              },
              "has_igo_invoice": {
                "type": "boolean",
                "description": "True if this fuel station has Invoice&GO invoicing, false otherwise"
              },
              "has_manual_ddt": {
                "type": "boolean",
                "description": "True if the fuel station has manual ddt, false otherwise"
              },
              "duplicate_master": {
                "type": "boolean",
                "description": "True if in multisupplier, the system duplicates the transactions from the master to the slave, false otherwise"
              }
            }
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "attended_default_status_id": {
            "type": "integer",
            "description": "Link to the default invoice status ('1' stands for 'approved' and '2' for 'to be approved') for attended transactions"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Store id of the fuel station"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          }
        },
        "description": "Fuel station data input"
      },
      "categoryInput": {
        "title": "category_input",
        "type": "object",
        "properties": {
          "requires_fuel_station": {
            "type": "boolean",
            "description": "True if during invoice detail creation, the fuel station is mandatory. False otherwise"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if category is active, false otherwise"
          },
          "code": {
            "type": "string",
            "description": "Category code"
          },
          "requires_vehicle": {
            "type": "boolean",
            "description": "True if during invoice detail creation, the vehicle is mandatory. False otherwise"
          },
          "name": {
            "type": "string",
            "description": "Category name"
          },
          "has_withholdilg": {
            "type": "boolean",
            "description": "True if the articles in this category have withholding. False otherwise"
          },
          "protocol_id": {
            "type": "integer",
            "description": "Optional invoice protocol linked to the category"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of the category"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_oil": {
                "type": "boolean",
                "description": "True if the category contains oil articles. False otherwise"
              },
              "is_customer_cost": {
                "type": "boolean",
                "description": "True if this category is designed for the customer cost articles. False otherwise.<br/>Customer cost articles are used to add optional costs in the Selfnet invoices of one or more customers."
              }
            }
          }
        },
        "description": "Category data input"
      },
      "activeInvoiceHeaderInput": {
        "title": "active_invoice_header_invoice_input",
        "type": "object",
        "properties": {
          "is_from_selfnet": {
            "type": "boolean",
            "description": "True if the invoice refers to Selfnet (invoice generated by cards), false otherwise (Invoice&GO invoices)"
          },
          "status_code": {
            "type": "string",
            "description": "Current status id of the invoice<br/>Possible values are:<ul><li><strong>SF01</strong> Inserita dal cliente (SF01)</li><li><strong>SF02</strong> Validata dal gestore (SF02)</li><li><strong>SF03</strong> Inviata\t(SF03)</li><li><strong>SF04</strong> Errore\t(SF04)</li><li><strong>SF05</strong> Consegnata (SF05)</li><li><strong>SF07</strong> Scartata (SF07)</li><li><strong>SF08</strong> Accettata dal destinatario (SF08)</li><li><strong>SF09</strong> Rifiutata dal destinatario (SF09)</li><li><strong>SF010</strong> \tAccettata automaticamente (SF10)</li><li><strong>SF011</strong> \tNon consegnata (definitivo) (SF11)</li><li><strong>SF012</strong> \tRifiutata manualmente (SF12)</li></ul>"
          },
          "fuel_station_id": {
            "type": "integer",
            "description": "Optional reference to the fuel station where the invoice is created. If this is NULL, supplier_id must be set."
          },
          "document_type_id": {
            "type": "string",
            "description": "Invoice type id.<br/>Possible values are:<ul><li><storng>TD01</strong>: Fattura immediata</li><li><storng>TD04</strong>: Nota di Credito</li><li><storng>TD17</strong>: Integrazione/autofattura per acquisto servizi dall’estero</li><li><storng>TD18</strong>: Integrazione per acquisto di beni intracomunitari</li><li><storng>TD19</strong>: Integrazione/autofattura per acquisto di beni ex art.17 c.2 DPR 633/72</li><li><storng>TD24</strong>: Fattura differita di cui all’art.21, comma 4, lett. a)</li><li><storng>TD27</strong>: Fattura per autoconsumo o per cessioni gratuite senza rivalsa</li></ul>"
          },
          "payment_notes": {
            "type": "string",
            "description": "Optional notes linked to the payment (if payment scheduler is active)"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "transaction_id": {
                  "type": "string",
                  "description": "Transaction ID from station PC"
                },
                "km": {
                  "type": "integer",
                  "description": "Optional odometer value"
                },
                "quantity": {
                  "type": "number",
                  "description": "Quantity of the purchased article"
                },
                "fuel_station_id": {
                  "type": "integer",
                  "description": "Optional fuel station id involved"
                },
                "notes": {
                  "type": "string",
                  "description": "Transaction notes"
                },
                "discount_increase": {
                  "type": "number",
                  "description": "0 if there is no discount on the transaction's total amount. "
                },
                "payments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "description": "Amount payed with this payment method"
                      },
                      "payment_method_code": {
                        "type": "string",
                        "description": "Payment method code<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
                      }
                    }
                  }
                },
                "ddt_number": {
                  "type": "string",
                  "description": "DDT number associated to the transaction"
                },
                "transaction_timestamp": {
                  "type": "string",
                  "description": "Transaction datetime",
                  "format": "date-time"
                },
                "unit_price": {
                  "type": "number",
                  "description": "Unit price of the purchased article"
                },
                "detail_status_code": {
                  "type": "string",
                  "description": "Current status of this record. It can be SF01 (to be approved), SF02 (approved) or SF12 (manually rejected)"
                },
                "card_id": {
                  "type": "integer",
                  "description": "Optional card involved in this transaction"
                },
                "article_id": {
                  "type": "integer",
                  "description": "Purchased article id"
                },
                "receipt_number": {
                  "type": "string",
                  "description": "Associated ticket id"
                },
                "is_oil": {
                  "type": "boolean",
                  "description": "True if the transaction refers to OIL article, false otherwise"
                },
                "insert_invoice_mode_id": {
                  "type": "integer",
                  "description": "Identifies transaction's origin. Possibile values:<br/><ul><li>1: manual insert by manager</li><li>2: manual insert by the customer</li><li>3: from station PC</li><li>4: from Self, by customer with ticket number</li><li>: Selfnet transaction</li></ul>"
                },
                "total_amount": {
                  "type": "number",
                  "description": "Total gros amount of this transaction"
                },
                "image_data": {
                  "type": "string",
                  "description": "Optional attached receipt image"
                },
                "credit_note_detail_id": {
                  "type": "integer",
                  "description": "Optional credit note detail id (used when this transaction is reversed)"
                },
                "unit_of_measure": {
                  "type": "string",
                  "description": "Unit of measure used"
                },
                "id": {
                  "type": "integer",
                  "description": "Unique invoice detail identifier"
                },
                "decrement_total": {
                  "type": "boolean",
                  "description": "If true, decrements transaction amount from the total. False otherwise."
                },
                "vehicle_id": {
                  "type": "integer",
                  "description": "Vehicle ID"
                }
              }
            }
          },
          "id": {
            "type": "integer",
            "description": "Unique invoice identifier"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer who is the recipient of the invoice"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier who owns the invoice. In an active invoice, if this is NULL, fuel_station_id must be set."
          },
          "payment_date": {
            "type": "string",
            "description": "The date when the invoice is payed by the customer (if payment scheduler is active)",
            "format": "date-time"
          }
        },
        "description": "Active invoice header data input"
      },
      "cardOutputArray": {
        "title": "card_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "Card code"
            },
            "can_outdoor": {
              "type": "boolean",
              "description": "True if the card can perform transactions outdoor, false otherwise"
            },
            "extra2": {
              "type": "string",
              "description": "Optional additional data field"
            },
            "max_period_credit": {
              "type": "number",
              "description": "Total credit of the card"
            },
            "extra1": {
              "type": "string",
              "description": "Optional additional data field"
            },
            "expire_datetime": {
              "type": "string",
              "description": "Card expire date",
              "format": "date-time"
            },
            "is_enabled": {
              "type": "boolean",
              "description": "True if the card is enabled, false otherwise"
            },
            "daily_max_limit": {
              "type": "number",
              "description": "Daily usage limit of the card"
            },
            "can_indoor": {
              "type": "boolean",
              "description": "True if the card can perform transactions indoor, false otherwise"
            },
            "has_excise_duty": {
              "type": "boolean",
              "description": "True if the invoices binded to this card must report the excise duty amount, false otherwise"
            },
            "id": {
              "type": "integer",
              "description": "Unique card identifier"
            },
            "pan": {
              "maxLength": 50,
              "type": "string",
              "description": "PAN of the card"
            },
            "customer_code": {
              "type": "string",
              "description": "Code of the customer owner of the card (import export purpose)"
            },
            "vehicle_id": {
              "type": "integer",
              "description": "Vehicle linked to card"
            },
            "email": {
              "type": "string",
              "description": "Optional email linked to the card, used to send email after a transaction"
            },
            "type_id": {
              "type": "integer",
              "description": "Card type id.<br/>Possible values are:<ul><li>2 (prepaid card)</li><li>3 (discount card)</li><li>4 (fidelity/points card)</li><li>5 (end of month card)</li></ul>"
            },
            "cost_center_id": {
              "type": "string",
              "description": "Optional cost center id, whose the card is linked"
            },
            "has_km_request": {
              "type": "boolean",
              "description": "True if the customer has to digit the odometer value during a transaction, false otherwise"
            },
            "has_km_check": {
              "type": "boolean",
              "description": "True if the the system check the has_km_request value, false otherwise"
            },
            "delivery_datetime": {
              "type": "string",
              "description": "When the card is given to the customer",
              "format": "date-time"
            },
            "last_km_value": {
              "type": "integer",
              "description": "Last inserted odometer value"
            },
            "enabled_articles": {
              "type": "array",
              "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "customer_id": {
              "type": "integer",
              "description": "Id of the customer owner of the card"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Id of the supplier owner of the card"
            },
            "supplier_code": {
              "type": "string",
              "description": "Code of the supplier owner of the card (import export purpose)"
            }
          }
        }
      },
      "enableFuelingOutput": {
        "title": "enable_fueling_output",
        "type": "object",
        "properties": {
          "erogId": {
            "type": "string",
            "description": "Fuel station identifier."
          },
          "description": {
            "type": "string",
            "description": "Response description."
          },
          "responseId": {
            "type": "string",
            "description": "Universally unique identifier."
          },
          "statusCode": {
            "type": "string",
            "description": "Response status code."
          },
          "stationId": {
            "type": "string",
            "description": "Fuel station identifier."
          }
        },
        "description": "retrive status if fueling is enable"
      },
      "customerOutput": {
        "title": "customer_output",
        "type": "object",
        "properties": {
          "invoice_notes": {
            "type": "string",
            "description": "Invoice custom notes"
          },
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "notify_recharge": {
            "type": "boolean",
            "description": "True if the system sends an email to the customer to notify a recharge operation, false otherwise"
          },
          "fee": {
            "type": "boolean",
            "description": "ECommerce customer fee"
          },
          "discount_level": {
            "type": "integer",
            "description": "Customer discount level"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "max_period_credit": {
            "type": "number",
            "description": "Max credit"
          },
          "charge_discount": {
            "type": "number",
            "description": "Discount amount for recharging operations"
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "has_driver_request": {
            "type": "boolean",
            "description": "True if the customer has to type the driver code when performing a transaction, false otherwise"
          },
          "ignore_payment_mode_on_pos": {
            "type": "boolean",
            "description": "If true ignores customer payment mode for POS recharges"
          },
          "vat_id": {
            "type": "integer",
            "description": "Customer vat"
          },
          "oil_iban": {
            "type": "string",
            "description": "If not empty, oil invoices uses this iban if needed"
          },
          "id": {
            "type": "integer",
            "description": "Unique customer identifier"
          },
          "has_driver_check": {
            "type": "boolean",
            "description": "True if the system check the driver code (it has to be an authorizative PIN), false otherwise"
          },
          "app_can_see_balance": {
            "type": "boolean",
            "description": "True if in the Selfnet mobile app user can see the customer credit, false otherwise"
          },
          "merge_invoices": {
            "type": "boolean",
            "description": "If True, OIL and NON OIL invoices are merged (where possible), false otherwise"
          },
          "is_without_vat": {
            "type": "boolean",
            "description": "If True, the customer has no VAT number"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "card_type_id": {
                "type": "integer",
                "description": "Only for Selfnet GT cards customers, shows the owner circuit.<br/>Possible valuesa are: <ul><li> 9 DKV</li><li>10 UTA</li><li>13 EWG</li><li>39 FAI</li><li>42 EDC (RADIUS)</li></ul>"
              },
              "registration_date": {
                "type": "string",
                "description": "Customer's registration date in the system",
                "format": "date-time"
              },
              "parent_id": {
                "type": "integer",
                "description": "Parent client ID reverse change management"
              },
              "associated_supplier_id": {
                "type": "integer",
                "description": "For multisupplier, linked supplier"
              },
              "is_external_customer": {
                "type": "boolean",
                "description": "True if the customer is created by API called by third parties. Only used in GET endpoints"
              },
              "is_exported": {
                "type": "boolean",
                "description": "True if the customer is created and still never exported, false otherwise"
              },
              "type": {
                "type": "string",
                "description": "Customer type -> 'S': Society, 'P': Private"
              }
            }
          },
          "residue_type": {
            "type": "integer",
            "description": "Shows on the receipt card or customer residue"
          },
          "stamp_duty": {
            "type": "boolean",
            "description": "If true invoices have stamp duty when numbers permits it"
          },
          "exposure": {
            "type": "number",
            "description": "Issued invoices still not payed"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "sdi_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "SDI code used to receive electronic invoices"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of customer data (not set for I&GO customers)"
          },
          "discount_group_id": {
            "type": "integer",
            "description": "Discount group identifier"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          },
          "non_oil_iban": {
            "type": "string",
            "description": "If not empty, non oil invoices uses this iban if needed"
          },
          "birthday": {
            "type": "string",
            "description": "Customer birthday date",
            "format": "date-time"
          },
          "notify_2": {
            "type": "boolean",
            "description": "True if the system sends an email to secondary customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "notify_3": {
            "type": "boolean",
            "description": "True if the system sends an email to third customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "gender": {
            "type": "string",
            "description": "Customer gender"
          },
          "has_customer_recharge": {
            "type": "boolean",
            "description": "True if the recharge operations increase the customer credit,False if they increase the credit of the single involved card."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "notify_1": {
            "type": "boolean",
            "description": "True if the system sends an email to main customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "nexi_configuration": {
            "type": "string",
            "description": "ECommerce configuration"
          },
          "notify": {
            "type": "boolean",
            "description": "True if the system sends an email to the customer to notify his operations, false otherwise"
          },
          "article_id": {
            "type": "integer",
            "description": "Article id to add costs to the customer invoice"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if customer is active, false otherwise"
          },
          "has_account_balance": {
            "type": "boolean",
            "description": "True if the system generates the account balance for this customer, false otherwise"
          },
          "enabled_vehicles": {
            "type": "array",
            "description": "Enabled vehicles ids, lookup for vehicle details using /vehicles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "electronic_invoice": {
            "type": "boolean",
            "description": "True if the customer use the ICAD Sistemi electronic invoice"
          },
          "start_invoice_date": {
            "type": "string",
            "description": "For Selfnet customer, represents the electronic invoice starting dateIf NULL, invoices start when the field electronic_invoice is activated",
            "format": "date"
          },
          "payment_terms_id": {
            "type": "integer",
            "description": "Payment terms identifier. It is used only for Selfnet customers<br/> Possible values are:<ul><li>2\t5 gg data fattura</li><li>3\t15 gg data fattura</li><li>4\t30 gg fine mese data fattura</li><li>5\t60 gg fine mese data fattura</li><li>6\t90 gg fine mese data fattura</li><li>22\tData Fattura</li><li>23\t25 gg data fattura</li><li>26\t30 gg data fattura</li><li>27\t45 gg data fattura</li><li>28\t35 gg data fattura</li><li>29\t40 gg data fattura</li><li>30\t60 gg fine mese + 12gg</li><li>31\t30 gg fine mese + 12gg</li><li>32\t20 gg data fattura</li><li>33\t30 gg fine mese +  8gg</li><li>34\t60 gg fine mese + 10gg</li><li>35\t30 gg fine mese +  5gg</li><li>36\t30 gg fine mese + 10gg</li><li>37\t60 gg fine mese + 15gg</li><li>38\t10 gg data fattura</li><li>39\t30 gg fine mese + 15gg</li><li>40\t60 gg fine mese +  5gg</li><li>41\t60 gg data fattura</li><li>42\t90 gg fine mese + 10gg</li><li>43\t90 gg data fattura</li></ul>"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "payment_mode_id": {
            "type": "string",
            "description": "Payment mode identifier.<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
          },
          "has_km_request": {
            "type": "boolean",
            "description": "True if the customer has to type the km value when performing a transaction, false otherwise"
          },
          "has_invoice": {
            "type": "boolean",
            "description": "True if the customer needs to invoice his transactions, false otherwise"
          },
          "has_km_check": {
            "type": "boolean",
            "description": "True if the system check the value of the field has_km_request, false otherwise"
          },
          "price_list_id": {
            "type": "integer",
            "description": "Price list identifier linked to this customer"
          },
          "payment_periodicity_id": {
            "type": "string",
            "description": "Payment periodicity identifier.<br/>Possible values are:<ul><li><strong>N</strong> Immediata (both for Invoice&GO and Selfnet customers)</li><li><strong>W</strong> Settimanale (only for Selfnet customers)</li><li><strong>D</strong> \tDecade (only for Selfnet customers)</li><li><strong>F</strong> \tQuindicinale (only for Selfnet customers)</li><li><strong>M</strong> \tMensile (both for Invoice&GO and Selfnet customers)</li><li><strong>B</strong> \tBimestrale (only for Selfnet customers)</li><li><strong>Q</strong> \tTrimestrale (only for Selfnet customers)</li><li><strong>X</strong> \tNessuna (only for Selfnet customers)</li></ul>"
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "has_split_payment": {
            "type": "boolean",
            "description": "True if the customer use the split payment, false otherwise"
          }
        },
        "description": "Customer output data"
      },
      "invoiceHeaderOutput": {
        "title": "invoice_header_output",
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "cab": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "rea_single_partner": {
            "type": "boolean",
            "description": "True if the society has an unique partner, false otherwise"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "rea_number": {
            "type": "string",
            "description": "The field must contain the number used to register the suppier to the 'ufficio registro imprese'."
          },
          "id": {
            "type": "integer",
            "description": "Unique invoice_header identifier"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "tax_regime_id": {
            "type": "integer",
            "description": "Tax regime used by the supplier"
          },
          "rea_share_capital": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "rea_liquidation": {
            "type": "boolean",
            "description": "True f the society is on liquidation, false otherwise"
          },
          "abi": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "is_join_stock_company": {
            "type": "string",
            "description": "True if this is a join stock company (spa, sapa, srl), false otherwise"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "rea_province": {
            "type": "string",
            "description": "The field must contain the initials of the province of the 'ufficio registro imprese' where the supplier is registered."
          },
          "iban": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "bic": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          }
        },
        "description": "Invoice header data output"
      },
      "supplierOutputArray": {
        "title": "supplier_output_array",
        "type": "array",
        "description": "Supplier data array",
        "items": {
          "type": "object",
          "properties": {
            "country": {
              "type": "string",
              "description": "Company country name"
            },
            "code": {
              "maxLength": 6,
              "minLength": 4,
              "type": "string",
              "description": "Company code"
            },
            "address": {
              "maxLength": 81,
              "type": "string",
              "description": "Company address"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes"
            },
            "city": {
              "maxLength": 30,
              "type": "string",
              "description": "Company headquarter city"
            },
            "vat_number": {
              "maxLength": 20,
              "type": "string",
              "description": "Company vat number"
            },
            "invoice_header_id": {
              "type": "integer",
              "description": "Invoice header identifier. This is used to set data in the invoice created by this supplier."
            },
            "adm_code": {
              "maxLength": 7,
              "minLength": 6,
              "type": "string",
              "description": "Company sdi passive code"
            },
            "house_number": {
              "type": "string",
              "description": "Company house number"
            },
            "protocol_id": {
              "type": "integer",
              "description": "Protocol identifier, used for supplier invoices"
            },
            "recharge_invoice": {
              "type": "boolean",
              "description": "If true, the system issues invoices for recharging operations. False otherwise."
            },
            "fax_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company fax number"
            },
            "fiscal_code": {
              "maxLength": 20,
              "type": "string",
              "description": "Company fiscal code"
            },
            "generate_autoinvoice_td27": {
              "type": "boolean",
              "description": "If true, the system use document type 'TD27' for auto invoices. False otherwise."
            },
            "zip_code": {
              "maxLength": 6,
              "minLength": 4,
              "type": "integer",
              "description": "Company headquarter zip code"
            },
            "internal_properties": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "True if supplier is active"
                },
                "max_deliverable": {
                  "type": "number",
                  "description": "Max deliverable amount in a single supply operation"
                },
                "auto_emission_account_balance": {
                  "type": "boolean",
                  "description": "If true, account balances are automatically created. False otherwise."
                },
                "logo": {
                  "type": "string",
                  "description": "Logo uri"
                },
                "max_rechargeable": {
                  "type": "number",
                  "description": "Max rechargeable amount in a single recharge operation"
                },
                "notification_date_reorder_legal_archiving_service": {
                  "type": "string",
                  "description": "",
                  "format": "date-time"
                },
                "sign_space": {
                  "type": "boolean",
                  "description": "If true, pos prints the signing space at the bottom. False otherwise."
                }
              }
            },
            "pec": {
              "maxLength": 100,
              "type": "string",
              "description": "Company pec",
              "format": "email"
            },
            "province": {
              "maxLength": 2,
              "type": "string",
              "description": "Province code"
            },
            "name": {
              "maxLength": 81,
              "type": "string",
              "description": "Company complete name"
            },
            "phone_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company phone number"
            },
            "short_name": {
              "type": "string",
              "description": "Supplier portal name. This is the name showed in portal and apps."
            },
            "email": {
              "maxLength": 100,
              "type": "string",
              "description": "Company email",
              "format": "email"
            },
            "country_id": {
              "type": "integer",
              "description": "Company country id"
            },
            "fuel_coupon_invoice": {
              "type": "boolean",
              "description": "If true, the system issues invoices for fuel coupons creations. False otherwise."
            }
          }
        }
      },
      "fuelStationMapOutput": {
        "title": "fuel_station_map_output",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Response description."
          },
          "pumpDetails": {
            "type": "array",
            "description": "Pump details.",
            "items": {
              "type": "object",
              "properties": {
                "pumpDetail": {
                  "type": "object",
                  "properties": {
                    "pumpNumber": {
                      "type": "boolean",
                      "description": "True if the fuel station is active, false otherwise"
                    },
                    "refuelMode": {
                      "type": "boolean",
                      "description": "True if in multisupplier, the system duplicates the transactions from the master to the slave, false otherwise"
                    },
                    "nzlDetails": {
                      "type": "array",
                      "description": "Nozzle details.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nzlDetail": {
                            "type": "object",
                            "properties": {
                              "productId": {
                                "type": "integer",
                                "description": "Product identifier."
                              },
                              "nzlNumber": {
                                "type": "string",
                                "description": "Nozzle identifier."
                              },
                              "productPrice": {
                                "type": "number",
                                "description": "Product price."
                              }
                            }
                          }
                        }
                      }
                    },
                    "priceLevel": {
                      "type": "boolean",
                      "description": "True if the pos can perform recharging operations, false otherwise"
                    },
                    "pumpStatus": {
                      "type": "boolean",
                      "description": "True if this fuel station (in multisupplier configuration) is the master, false otherwise"
                    }
                  }
                }
              }
            }
          },
          "responseId": {
            "type": "string",
            "description": "Universally unique identifier."
          },
          "statusCode": {
            "type": "integer",
            "description": "Response status code."
          },
          "stationId": {
            "type": "string",
            "description": "Fuel station identifier."
          }
        },
        "description": "Fuel station map data output"
      },
      "residueCardsOutput": {
        "title": "residue_cards_output",
        "type": "object",
        "properties": {
          "residue_type": {
            "type": "integer",
            "description": "The type_id identify the tipologies of the cards: TypeId = 1: This cards is a monthly cards, TypeId = 2: This cards is a rechargeable cards"
          },
          "daily_residue": {
            "type": "number",
            "description": "Daily residue of the cards. If the daily residue is 9999. This is a infinite daily plafond"
          },
          "residue": {
            "type": "number",
            "description": "Residue of the cards"
          }
        },
        "description": "Residue cards data output"
      },
      "manualSupplyInput": {
        "title": "manual_supply_input",
        "type": "object",
        "properties": {
          "supplies": {
            "type": "array",
            "description": "Array of supplies created linked to the transactions",
            "items": {
              "type": "object",
              "properties": {
                "fuel_station_id": {
                  "type": "string",
                  "description": "Id of the fuel station where the supply is performed"
                },
                "total_discount": {
                  "type": "number",
                  "description": "Total discount (or decrease)."
                },
                "quantity": {
                  "type": "number",
                  "description": "Quantity purchased of the involved article"
                },
                "notes": {
                  "type": "string",
                  "description": "Optional notes. Used in manual supplies."
                },
                "unit_discount": {
                  "type": "number",
                  "description": "Unit discount (or decrease)"
                },
                "article_name": {
                  "type": "integer",
                  "description": "Name of the purchased article"
                },
                "supply_number": {
                  "type": "integer",
                  "description": "Transaction number linked to the supply"
                },
                "gross_amount": {
                  "type": "number",
                  "description": "Supply gross amount"
                },
                "is_invoiced": {
                  "type": "boolean",
                  "description": "True if the supply is invoiced, False if it hasn't to be invoice. NULL if it has to be processed."
                },
                "pump_number": {
                  "type": "string",
                  "description": "Involved pump number."
                },
                "is_reversal": {
                  "type": "boolean",
                  "description": "True if this is a reversal supply, false otherwise"
                },
                "article_id": {
                  "type": "string",
                  "description": "Id of the purchased article"
                },
                "supply_datetime": {
                  "type": "string",
                  "description": "Supply datetime",
                  "format": "date-time"
                },
                "is_stand_alone": {
                  "type": "boolean",
                  "description": "True if this is a stand alone supply, false otherwise"
                },
                "price": {
                  "type": "number",
                  "description": "Unit price applied in this supply"
                },
                "receive_datetime": {
                  "type": "string",
                  "description": "When supply data are received",
                  "format": "date-time"
                },
                "net_amount": {
                  "type": "number",
                  "description": "Supply net amount"
                },
                "terminal_id": {
                  "type": "string",
                  "description": "Terminal id linked to the supply"
                },
                "is_outdoor": {
                  "type": "boolean",
                  "description": "True if this is an outdoor supply, false indoor"
                }
              }
            }
          },
          "transactions": {
            "type": "array",
            "description": "Array of transactions created linked to the supplies",
            "items": {
              "type": "object",
              "properties": {
                "km": {
                  "type": "integer",
                  "description": "Optioanl odometer value"
                },
                "amount": {
                  "type": "number",
                  "description": "Total amount"
                },
                "payment_details": {
                  "type": "string",
                  "description": "If the payment_type_id value is 'carta', this field contains the card PAN."
                },
                "start_datetime": {
                  "type": "string",
                  "description": "Datetime of the transaction creation",
                  "format": "date-time"
                },
                "end_datetime": {
                  "type": "string",
                  "description": "Datetime of the transaction end",
                  "format": "date-time"
                },
                "plate": {
                  "type": "string",
                  "description": "Optional vehicle plate"
                },
                "ticket_number": {
                  "type": "string",
                  "description": "Receipt number"
                },
                "auth_code": {
                  "type": "string",
                  "description": "Auth code used for GT cards"
                },
                "card_type_id": {
                  "type": "number",
                  "description": "Id of the card type, if the payment_type_id value is 'carta'"
                },
                "extra_code": {
                  "type": "integer",
                  "description": "Optional extra code"
                },
                "stan": {
                  "type": "integer",
                  "description": "Transaction number"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Id of the invoved customer"
                },
                "payment_type_id": {
                  "type": "string",
                  "description": "Payment type used. If the value is 'carta', an ICAD Sistemi card was used."
                }
              }
            }
          },
          "supplier_id": {
            "type": "string",
            "description": "Id/code of the involved supplier."
          }
        },
        "description": "Manual supply data input"
      },
      "protocolOutputArray": {
        "title": "protocol_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "protocol": {
              "type": "string",
              "description": "Protocol used in invoice creation"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes"
            },
            "id": {
              "type": "integer",
              "description": "Unique protocol identifier"
            },
            "immediate_invoice_protocol": {
              "type": "string",
              "description": "Protocol used in <strong>immediate</strong> invoice creation"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Supplier owner of the protocol"
            }
          }
        }
      },
      "transactionOutputArray": {
        "title": "transaction_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "km": {
              "type": "integer",
              "description": "Optioanl odometer value"
            },
            "amount": {
              "type": "number",
              "description": "Total amount"
            },
            "payment_details": {
              "type": "string",
              "description": "If the payment_type_id value is 'carta', this field contains the card PAN."
            },
            "start_datetime": {
              "type": "string",
              "description": "Datetime of the transaction creation",
              "format": "date-time"
            },
            "end_datetime": {
              "type": "string",
              "description": "Datetime of the transaction end",
              "format": "date-time"
            },
            "plate": {
              "type": "string",
              "description": "Optional vehicle plate"
            },
            "ticket_number": {
              "type": "string",
              "description": "Receipt number"
            },
            "auth_code": {
              "type": "string",
              "description": "Auth code used for GT cards"
            },
            "card_type_id": {
              "type": "number",
              "description": "Id of the card type, if the payment_type_id value is 'carta'"
            },
            "extra_code": {
              "type": "integer",
              "description": "Optional extra code"
            },
            "stan": {
              "type": "integer",
              "description": "Transaction number"
            },
            "id": {
              "type": "integer",
              "description": "Unique transaction identifier"
            },
            "customer_id": {
              "type": "string",
              "description": "Id of the invoved customer"
            },
            "payment_type_id": {
              "type": "string",
              "description": "Payment type used. If the value is 'carta', an ICAD Sistemi card was used."
            }
          }
        }
      },
      "fuelstationMisePricesOutput": {
        "title": "prices_from_mise_fuelstations",
        "type": "object",
        "description": "Retrieve nearby fuel stations mise prices by geocodes"
      },
      "transactionPaymentOutput": {
        "title": "Transaction payment data output",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "description": "Total amount"
            },
            "is_codes": {
              "type": "string",
              "description": "is_codes"
            }
          }
        }
      },
      "paymentTermsOutputArray": {
        "title": "payment_terms_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "stars_from_month_end": {
              "type": "boolean",
              "description": "If True, days are counted from the end of the mont. Otherwise, from the invoice date."
            },
            "name": {
              "type": "string",
              "description": "Payment terms name"
            },
            "days": {
              "type": "integer",
              "description": "Number of days to add to calculate the invoice payment expire date"
            },
            "id": {
              "type": "integer",
              "description": "Unique payment terms identifier"
            }
          }
        }
      },
      "version": {
        "title": "version",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Environment referred by this version (prod, dev,...)"
          },
          "version": {
            "type": "string",
            "description": "Latest application's version"
          }
        },
        "description": "Data used to read/write an S3 file with version info"
      },
      "circuitOutputArray": {
        "title": "circuit_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "protocol": {
              "type": "string",
              "description": "Optional protocol"
            },
            "code": {
              "type": "string",
              "description": "True if during invoice detail creation, the fuel station is mandatory. False otherwise"
            },
            "circuit_id": {
              "type": "integer",
              "description": "ID of the circuit"
            },
            "id": {
              "type": "integer",
              "description": "Unique circuit identifier"
            },
            "supplier_id": {
              "type": "integer",
              "description": "ID of the supplier owner of the circuit"
            },
            "payment_term_id": {
              "type": "integer",
              "description": "True if during invoice detail creation, the vehicle is mandatory. False otherwise"
            }
          }
        }
      },
      "articleInput": {
        "title": "article_input",
        "type": "object",
        "properties": {
          "ignore_category_protocol": {
            "type": "boolean",
            "description": "True if invoices with this article can ignore the category protocol and use only the fuel station/supplier protocol, false otherwise"
          },
          "code": {
            "type": "string",
            "description": "Article code"
          },
          "notes": {
            "type": "string",
            "description": "Article optional notes"
          },
          "is_system_reserved": {
            "type": "boolean",
            "description": "True if the article automatically created, false otherwise"
          },
          "price_precision": {
            "type": "integer",
            "description": "Count of decimal numbers in the article price.<br/><i>Example</i>: If this field value is '3', a valid unit price is 1,234, while something like 1,23456 would be truncated to 1,234."
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if article is active, false otherwise"
          },
          "unity_of_measure_id": {
            "type": "integer",
            "description": "Unity of measure used to register transactions with this article"
          },
          "is_oil": {
            "type": "boolean",
            "description": "True if the article is an oil article, false otherwise"
          },
          "category_id": {
            "type": "integer",
            "description": "Category linked to which the article belongs"
          },
          "name": {
            "type": "string",
            "description": "Article name"
          },
          "vat_id": {
            "type": "integer",
            "description": "Applied vat on the article"
          },
          "has_stamp_duty": {
            "type": "boolean",
            "description": "True if the article uses the stamp duty, false otherwise"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of the article"
          },
          "article_point_id": {
            "type": "integer",
            "description": "Id of optional points settings (for fidelity campaigns)"
          }
        },
        "description": "Article data input"
      },
      "fuelStationsOutputArray": {
        "title": "fuel_stations_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name of the fuel station"
            },
            "Id": {
              "type": "string",
              "description": "id of the fuel station"
            },
            "supplier_id": {
              "type": "integer",
              "description": "supplier id of the fuel station"
            }
          }
        }
      },
      "residueFuelCouponsOutput": {
        "title": "residue_fuelcoupons_output",
        "type": "object",
        "properties": {
          "residue_type": {
            "type": "integer",
            "description": "The type_id identify the tipologies of the cards: TypeId = 1: This cards is a monthly cards, TypeId = 2: This cards is a rechargeable cards"
          },
          "residue": {
            "type": "number",
            "description": "FuelCoupons residue"
          }
        },
        "description": "Residue FuelCoupons data output"
      },
      "supplyOutputArray": {
        "title": "supply_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "fuel_station_id": {
              "type": "string",
              "description": "Id of the fuel station where the supply is performed"
            },
            "total_discount": {
              "type": "number",
              "description": "Total discount (or decrease)."
            },
            "quantity": {
              "type": "number",
              "description": "Quantity purchased of the involved article"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes. Used in manual supplies."
            },
            "unit_discount": {
              "type": "number",
              "description": "Unit discount (or decrease)"
            },
            "article_name": {
              "type": "integer",
              "description": "Name of the purchased article"
            },
            "supply_number": {
              "type": "integer",
              "description": "Transaction number linked to the supply"
            },
            "gross_amount": {
              "type": "number",
              "description": "Supply gross amount"
            },
            "is_invoiced": {
              "type": "boolean",
              "description": "True if the supply is invoiced, False if it hasn't to be invoice. NULL if it has to be processed."
            },
            "pump_number": {
              "type": "string",
              "description": "Involved pump number."
            },
            "is_reversal": {
              "type": "boolean",
              "description": "True if this is a reversal supply, false otherwise"
            },
            "article_id": {
              "type": "string",
              "description": "Id of the purchased article"
            },
            "supply_datetime": {
              "type": "string",
              "description": "Supply datetime",
              "format": "date-time"
            },
            "is_stand_alone": {
              "type": "boolean",
              "description": "True if this is a stand alone supply, false otherwise"
            },
            "price": {
              "type": "number",
              "description": "Unit price applied in this supply"
            },
            "receive_datetime": {
              "type": "string",
              "description": "When supply data are received",
              "format": "date-time"
            },
            "net_amount": {
              "type": "number",
              "description": "Supply net amount"
            },
            "id": {
              "type": "integer",
              "description": "Unique supply identifier"
            },
            "terminal_id": {
              "type": "string",
              "description": "Terminal id linked to the supply"
            },
            "is_outdoor": {
              "type": "boolean",
              "description": "True if this is an outdoor supply, false indoor"
            }
          }
        }
      },
      "vehicleInput": {
        "title": "vehicle_input",
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "True if vehicle is active, false otherwise."
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "driver": {
            "type": "string",
            "description": "Vehicle's driver identifier"
          },
          "plate": {
            "type": "string",
            "description": "Vehicle's plate"
          },
          "model": {
            "type": "string",
            "description": "Vehicle's model"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer owner of the vehicle"
          }
        },
        "description": "vehicle data input"
      },
      "cardInput": {
        "title": "card_input",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Card code"
          },
          "can_outdoor": {
            "type": "boolean",
            "description": "True if the card can perform transactions outdoor, false otherwise"
          },
          "type_id": {
            "type": "integer",
            "description": "Card type id.<br/>Possible values are:<ul><li>2 (prepaid card)</li><li>3 (discount card)</li><li>4 (fidelity/points card)</li><li>5 (end of month card)</li></ul>"
          },
          "cost_center_id": {
            "type": "string",
            "description": "Optional cost center id, whose the card is linked"
          },
          "has_km_request": {
            "type": "boolean",
            "description": "True if the customer has to digit the odometer value during a transaction, false otherwise"
          },
          "extra2": {
            "type": "string",
            "description": "Optional additional data field"
          },
          "max_period_credit": {
            "type": "number",
            "description": "Total credit of the card"
          },
          "has_km_check": {
            "type": "boolean",
            "description": "True if the the system check the has_km_request value, false otherwise"
          },
          "extra1": {
            "type": "string",
            "description": "Optional additional data field"
          },
          "expire_datetime": {
            "type": "string",
            "description": "Card expire date",
            "format": "date-time"
          },
          "delivery_datetime": {
            "type": "string",
            "description": "When the card is given to the customer",
            "format": "date-time"
          },
          "last_km_value": {
            "type": "integer",
            "description": "Last inserted odometer value"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if the card is enabled, false otherwise"
          },
          "daily_max_limit": {
            "type": "number",
            "description": "Daily usage limit of the card"
          },
          "can_indoor": {
            "type": "boolean",
            "description": "True if the card can perform transactions indoor, false otherwise"
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "has_excise_duty": {
            "type": "boolean",
            "description": "True if the invoices binded to this card must report the excise duty amount, false otherwise"
          },
          "customer_id": {
            "type": "integer",
            "description": "Id of the customer owner of the card"
          },
          "pan": {
            "maxLength": 50,
            "type": "string",
            "description": "PAN of the card"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier owner of the card"
          },
          "supplier_code": {
            "type": "string",
            "description": "Code of the supplier owner of the card (import export purpose)"
          },
          "customer_code": {
            "type": "string",
            "description": "Code of the customer owner of the card (import export purpose)"
          },
          "vehicle_id": {
            "type": "integer",
            "description": "Vehicle linked to card"
          },
          "email": {
            "type": "string",
            "description": "Optional email linked to the card, used to send email after a transaction"
          }
        },
        "description": "Card data input"
      },
      "userInput": {
        "title": "user_input",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          },
          "vehicle_id": {
            "type": "integer",
            "description": "Used to assign one specific vehicle to this user. When this is set, the user can use only this vehicle in Invoice&GO"
          },
          "email": {
            "type": "string",
            "description": "Login email",
            "format": "email"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "True if user is active, false otherwise"
              },
              "father_user_id": {
                "type": "integer",
                "description": "User who created this user"
              },
              "identity_provider_id": {
                "type": "integer",
                "description": "Id assigned from the identity provider"
              },
              "user_level_id": {
                "type": "integer",
                "description": "Level of the user"
              }
            }
          }
        },
        "description": "User data input"
      },
      "passiveInvoiceHeaderOutputArray": {
        "title": "passive_invoice_header_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "issuing_datetime": {
              "type": "string",
              "description": "Date time when the invoice is issued",
              "format": "date-time"
            },
            "seller_fiscal_code": {
              "type": "string",
              "description": "Fiscal code of the invoice issuer"
            },
            "amount": {
              "type": "number",
              "description": "Total amount of the invoice"
            },
            "year": {
              "type": "integer",
              "description": "Year when the invoice is issued"
            },
            "protocol_number": {
              "type": "string",
              "description": "Protocol number"
            },
            "accounting_record_datetime": {
              "type": "string",
              "description": "Accounting registration date",
              "format": "date-time"
            },
            "storage_status_id": {
              "type": "integer",
              "description": "Shows the current status in the electronic storage flow (if available).<br/>Possible values are:<ul><li>1\tDa compilare</li><li>2\tCompilata</li><li>3\tPronta per l'invio</li><li>4\tInviata</li><li>5\tConservata (only this is used for active invoices, the other values are for passive invoices)</li><li>6\tErrore</li></ul>"
            },
            "customer_vat": {
              "type": "string",
              "description": "Vat of the invoice recipient"
            },
            "is_downloaded": {
              "type": "boolean",
              "description": "True if the invoice was downloaded with the massive donwload, false otherwise "
            },
            "is_electronically_stored": {
              "type": "boolean",
              "description": "True if the invoice is electronically stored, false otherwise"
            },
            "vat_protocol": {
              "type": "string",
              "description": "Protocol vat"
            },
            "invoice_pdv_id": {
              "type": "string",
              "description": "Id assigned to the invoice file by the electronic storage system"
            },
            "number": {
              "type": "string",
              "description": "Invoice number"
            },
            "seller_name": {
              "type": "string",
              "description": "Name of the invoice issuer"
            },
            "document_type_id": {
              "type": "string",
              "description": "Invoice type id.<br/>Possible values are:<ul><li><storng>TD01</strong>: Fattura immediata</li><li><storng>TD04</strong>: Nota di Credito</li><li><storng>TD17</strong>: Integrazione/autofattura per acquisto servizi dall’estero</li><li><storng>TD18</strong>: Integrazione per acquisto di beni intracomunitari</li><li><storng>TD19</strong>: Integrazione/autofattura per acquisto di beni ex art.17 c.2 DPR 633/72</li><li><storng>TD24</strong>: Fattura differita di cui all’art.21, comma 4, lett. a)</li><li><storng>TD27</strong>: Fattura per autoconsumo o per cessioni gratuite senza rivalsa</li></ul>"
            },
            "accounting_record_number": {
              "type": "string",
              "description": "Accounting registration number"
            },
            "causal": {
              "type": "string",
              "description": "Invoice causal"
            },
            "id": {
              "type": "integer",
              "description": "Unique invoice identifier"
            },
            "notification_pdv_id": {
              "type": "string",
              "description": "Id assigned to the invoice notification file by the electronic storage system"
            },
            "customer_name": {
              "type": "string",
              "description": "Name of the invoice recipient"
            },
            "receive_datetime": {
              "type": "string",
              "description": "Date time when the invoice is received by ICAD Sistemi",
              "format": "date-time"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Id of the supplier who owns the invoice. In an active invoice, if this is NULL, fuel_station_id must be set."
            },
            "protocol_datetime": {
              "type": "string",
              "description": "Protocol date",
              "format": "date-time"
            }
          }
        }
      },
      "articleOutputArray": {
        "title": "article_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "ignore_category_protocol": {
              "type": "boolean",
              "description": "True if invoices with this article can ignore the category protocol and use only the fuel station/supplier protocol, false otherwise"
            },
            "code": {
              "type": "string",
              "description": "Article code"
            },
            "notes": {
              "type": "string",
              "description": "Article optional notes"
            },
            "is_system_reserved": {
              "type": "boolean",
              "description": "True if the article automatically created, false otherwise"
            },
            "price_precision": {
              "type": "integer",
              "description": "Count of decimal numbers in the article price.<br/><i>Example</i>: If this field value is '3', a valid unit price is 1,234, while something like 1,23456 would be truncated to 1,234."
            },
            "is_enabled": {
              "type": "boolean",
              "description": "True if article is active, false otherwise"
            },
            "unity_of_measure_id": {
              "type": "integer",
              "description": "Unity of measure used to register transactions with this article"
            },
            "is_oil": {
              "type": "boolean",
              "description": "True if the article is an oil article, false otherwise"
            },
            "category_id": {
              "type": "integer",
              "description": "Category linked to which the article belongs"
            },
            "is_code": {
              "type": "integer",
              "description": "IS code assigned to OIL articles"
            },
            "name": {
              "type": "string",
              "description": "Article name"
            },
            "vat_id": {
              "type": "integer",
              "description": "Applied vat on the article"
            },
            "has_stamp_duty": {
              "type": "boolean",
              "description": "True if the article uses the stamp duty, false otherwise"
            },
            "id": {
              "type": "integer",
              "description": "Unique article identifier"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Supplier owner of the article"
            },
            "article_point_id": {
              "type": "integer",
              "description": "Id of optional points settings (for fidelity campaigns)"
            }
          }
        }
      },
      "passiveInvoiceHeaderInput": {
        "title": "passive_invoice_header_input",
        "type": "object",
        "properties": {
          "protocol_number": {
            "type": "string",
            "description": "Protocol number"
          },
          "document_type_id": {
            "type": "string",
            "description": "Invoice type id.<br/>Possible values are:<ul><li><storng>TD01</strong>: Fattura immediata</li><li><storng>TD04</strong>: Nota di Credito</li><li><storng>TD17</strong>: Integrazione/autofattura per acquisto servizi dall’estero</li><li><storng>TD18</strong>: Integrazione per acquisto di beni intracomunitari</li><li><storng>TD19</strong>: Integrazione/autofattura per acquisto di beni ex art.17 c.2 DPR 633/72</li><li><storng>TD24</strong>: Fattura differita di cui all’art.21, comma 4, lett. a)</li><li><storng>TD27</strong>: Fattura per autoconsumo o per cessioni gratuite senza rivalsa</li></ul>"
          },
          "accounting_record_datetime": {
            "type": "string",
            "description": "Accounting registration date",
            "format": "date-time"
          },
          "storage_status_id": {
            "type": "integer",
            "description": "Shows the current status in the electronic storage flow (if available).<br/>Possible values are:<ul><li>1\tDa compilare</li><li>2\tCompilata</li><li>3\tPronta per l'invio</li><li>4\tInviata</li><li>5\tConservata (only this is used for active invoices, the other values are for passive invoices)</li><li>6\tErrore</li></ul>"
          },
          "accounting_record_number": {
            "type": "string",
            "description": "Accounting registration number"
          },
          "id": {
            "type": "integer",
            "description": "Unique invoice identifier"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier who owns the invoice. In an active invoice, if this is NULL, fuel_station_id must be set."
          },
          "protocol_datetime": {
            "type": "string",
            "description": "Protocol date",
            "format": "date-time"
          },
          "vat_protocol": {
            "type": "string",
            "description": "Protocol vat"
          }
        },
        "description": "Passive invoice header data input"
      },
      "fuelStationOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "unattended_manual_insert": {
            "type": "boolean"
          },
          "city": {
            "type": "string"
          },
          "attended_is_receipt_number_mandatory": {
            "type": "boolean"
          },
          "latitude": {
            "type": "integer"
          },
          "attended_is_photo_mandatory": {
            "type": "boolean"
          },
          "unattended_is_receipt_number_mandatory": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "attended_default_status_id": {
            "type": "integer"
          },
          "unattended_auto_retrieve_invoice_data": {
            "type": "boolean"
          },
          "unattended_is_photo_mandatory": {
            "type": "integer"
          },
          "unattended_default_status_id": {
            "type": "integer"
          },
          "attended_manual_insert": {
            "type": "boolean"
          },
          "longitude": {
            "type": "integer"
          },
          "address": {
            "type": "string"
          },
          "attended_auto_retrieve_invoice_data": {
            "type": "boolean"
          },
          "flag": {
            "type": "string"
          },
          "automation": {
            "type": "string"
          },
          "has_computer_station_connection": {
            "type": "boolean"
          }
        },
        "x-examples": {
          "Example 1": {
            "id": 0,
            "unattended_manual_insert": false,
            "city": "",
            "attended_is_receipt_number_mandatory": false,
            "latitude": 0,
            "attended_is_photo_mandatory": false,
            "unattended_is_receipt_number_mandatory": false,
            "name": "",
            "attended_default_status_id": 0,
            "unattended_auto_retrieve_invoice_data": false,
            "unattended_is_photo_mandatory": 0,
            "unattended_default_status_id": 0,
            "attended_manual_insert": false,
            "longitude": 0,
            "address": "",
            "attended_auto_retrieve_invoice_data": false,
            "flag": "",
            "automation": "",
            "has_computer_station_connection": false
          }
        }
      },
      "fuelStationOutputArray": {
        "title": "fuel_station_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "unattended_manual_insert": {
              "type": "boolean",
              "description": "True if after failing an attempt to retrieve data from the computer station, the user can proceed manually for an unattended transaction"
            },
            "country": {
              "type": "string",
              "description": "Company country name"
            },
            "disable_self_discount": {
              "type": "boolean",
              "description": "True if the self service customer discount is disabled, false otherwise"
            },
            "code": {
              "type": "string",
              "description": "Code assigned to the fuel station by the supplier"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes"
            },
            "flag": {
              "type": "string",
              "description": "Reference to the fuel station banner."
            },
            "distance": {
              "type": "number",
              "description": "The value is set when the gps coordinates are sent as input in search fuel stations method. The value is the cartesian distance in km from input gps to the current fuel station"
            },
            "city": {
              "maxLength": 30,
              "type": "string",
              "description": "Company headquarter city"
            },
            "attended_is_receipt_number_mandatory": {
              "type": "boolean",
              "description": "True if the receipt number is mandatory for attended transactions"
            },
            "vat_number": {
              "maxLength": 20,
              "type": "string",
              "description": "Company vat number"
            },
            "latitude": {
              "type": "number",
              "description": "Latitude of the fuel station"
            },
            "adm_code": {
              "maxLength": 7,
              "minLength": 6,
              "type": "string",
              "description": "Company sdi passive code"
            },
            "attended_is_photo_mandatory": {
              "type": "boolean",
              "description": "True if the receipt photo is mandatory for attended transactions"
            },
            "unattended_is_receipt_number_mandatory": {
              "type": "boolean",
              "description": "True if the receipt number is mandatory for unattended transactions"
            },
            "house_number": {
              "type": "string",
              "description": "Company house number"
            },
            "unattended_auto_retrieve_invoice_data": {
              "type": "boolean",
              "description": "True if this fuel station can retrieve data from the computer station for unattended transactions"
            },
            "fiscal_code": {
              "maxLength": 20,
              "type": "string",
              "description": "Company fiscal code"
            },
            "unattended_is_photo_mandatory": {
              "type": "integer",
              "description": "This fields determines if the photo for unattened photos is mandatory. <br/>The possible values are:<ul><li>0: the photo is never mandatory</li><li>1: the photo is mandatory only for manual inserts</li><li>2: the photo is always mandatory</li></ul>"
            },
            "zip_code": {
              "maxLength": 6,
              "minLength": 4,
              "type": "integer",
              "description": "Company headquarter zip code"
            },
            "pec": {
              "maxLength": 100,
              "type": "string",
              "description": "Company pec",
              "format": "email"
            },
            "unattended_default_status_id": {
              "type": "integer",
              "description": "Link to the default invoice status ('1' stands for 'approved' and '2' for 'to be approved') for unattended transactions"
            },
            "hasComputerStationConnection": {
              "type": "boolean",
              "description": "True if the fuel station can communicate with the computer station. False otherwise."
            },
            "automation": {
              "type": "string",
              "description": "Identifies fuel station automation"
            },
            "attended_manual_insert": {
              "type": "boolean",
              "description": "True if after failing an attempt to retrieve data from the computer station, the customer can proceed manually for an attended transaction"
            },
            "province": {
              "maxLength": 2,
              "type": "string",
              "description": "Province code"
            },
            "manager_id": {
              "type": "integer",
              "description": "Id of the fuel station manager"
            },
            "id": {
              "type": "integer",
              "description": "Unique fuel station identifier"
            },
            "email": {
              "maxLength": 100,
              "type": "string",
              "description": "Company email",
              "format": "email"
            },
            "longitude": {
              "type": "number",
              "description": "Longitude of the fuel station"
            },
            "store_id": {
              "type": "string",
              "description": "Store id of the fuel station"
            },
            "address": {
              "maxLength": 81,
              "type": "string",
              "description": "Company address"
            },
            "fax_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company fax number"
            },
            "attended_auto_retrieve_invoice_data": {
              "type": "boolean",
              "description": "True if this fuel station can retrieve data from the computer station for attended transactions"
            },
            "internal_properties": {
              "type": "object",
              "properties": {
                "is_master": {
                  "type": "boolean",
                  "description": "True if this fuel station (in multisupplier configuration) is the master, false otherwise"
                },
                "total_sms": {
                  "type": "integer",
                  "description": "Total sms"
                },
                "invoice_header_id": {
                  "type": "integer",
                  "description": "Link with the invoice header data to be used"
                },
                "has_non_oil": {
                  "type": "boolean",
                  "description": "True if this fuel station has the non oil Selfnet invoicing, false otherwise"
                },
                "has_invoice": {
                  "type": "boolean",
                  "description": "True if this fuel station issues invoices without supplier header data, false otherwise (the header is read from the supplier)"
                },
                "has_pos_recharge": {
                  "type": "boolean",
                  "description": "True if the pos can perform recharging operations, false otherwise"
                },
                "protocol_id": {
                  "type": "integer",
                  "description": "Link to the protocol to be used in the invoices"
                },
                "total_email": {
                  "type": "integer",
                  "description": "Total emails"
                },
                "range_sms": {
                  "type": "boolean",
                  "description": "Settings for sending sms"
                },
                "is_enabled": {
                  "type": "boolean",
                  "description": "True if the fuel station is active, false otherwise"
                },
                "dispensers_count": {
                  "type": "integer",
                  "description": "Total count of the dispenser active in the fuel station"
                },
                "has_non_oil_invoice_and_go": {
                  "type": "boolean",
                  "description": "True if this fuel station has the non oil Invoice&GO invoicing, false otherwise"
                },
                "is_code": {
                  "type": "string",
                  "description": "ICAD Sistemi fuel station code"
                },
                "range_email": {
                  "type": "boolean",
                  "description": "Settings for sending emails"
                },
                "has_igo_invoice": {
                  "type": "boolean",
                  "description": "True if this fuel station has Invoice&GO invoicing, false otherwise"
                },
                "has_manual_ddt": {
                  "type": "boolean",
                  "description": "True if the fuel station has manual ddt, false otherwise"
                },
                "duplicate_master": {
                  "type": "boolean",
                  "description": "True if in multisupplier, the system duplicates the transactions from the master to the slave, false otherwise"
                }
              }
            },
            "enabled_articles": {
              "type": "array",
              "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "attended_default_status_id": {
              "type": "integer",
              "description": "Link to the default invoice status ('1' stands for 'approved' and '2' for 'to be approved') for attended transactions"
            },
            "name": {
              "maxLength": 81,
              "type": "string",
              "description": "Company complete name"
            },
            "phone_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company phone number"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Store id of the fuel station"
            },
            "country_id": {
              "type": "integer",
              "description": "Company country id"
            }
          }
        }
      },
      "supplierOutput": {
        "title": "supplier_output",
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "recharge_invoice": {
            "type": "boolean",
            "description": "If true, the system issues invoices for recharging operations. False otherwise."
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "generate_autoinvoice_td27": {
            "type": "boolean",
            "description": "If true, the system use document type 'TD27' for auto invoices. False otherwise."
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "id": {
            "type": "integer",
            "description": "Unique supplier identifier"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "invoice_header_id": {
            "type": "integer",
            "description": "Invoice header identifier. This is used to set data in the invoice created by this supplier."
          },
          "protocol_id": {
            "type": "integer",
            "description": "Protocol identifier, used for supplier invoices"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "True if supplier is active"
              },
              "max_deliverable": {
                "type": "number",
                "description": "Max deliverable amount in a single supply operation"
              },
              "auto_emission_account_balance": {
                "type": "boolean",
                "description": "If true, account balances are automatically created. False otherwise."
              },
              "logo": {
                "type": "string",
                "description": "Logo uri"
              },
              "max_rechargeable": {
                "type": "number",
                "description": "Max rechargeable amount in a single recharge operation"
              },
              "notification_date_reorder_legal_archiving_service": {
                "type": "string",
                "description": "",
                "format": "date-time"
              },
              "sign_space": {
                "type": "boolean",
                "description": "If true, pos prints the signing space at the bottom. False otherwise."
              }
            }
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "short_name": {
            "type": "string",
            "description": "Supplier portal name. This is the name showed in portal and apps."
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          },
          "fuel_coupon_invoice": {
            "type": "boolean",
            "description": "If true, the system issues invoices for fuel coupons creations. False otherwise."
          }
        },
        "description": "Supplier output data"
      },
      "appliedPriceOutput": {
        "title": "applied_price_output",
        "type": "object",
        "properties": {
          "article_id": {
            "type": "integer",
            "description": "Article id referred by this price"
          },
          "fuel_station_id": {
            "type": "integer",
            "description": "Involved fuel station id"
          },
          "price_level_id": {
            "type": "integer",
            "description": "Price level id (attended, unattended, self, ...)"
          },
          "start_datetime": {
            "type": "string",
            "description": "The price is applied after this datetime",
            "format": "date-time"
          },
          "article_name": {
            "type": "string",
            "description": "Name of the article referred by this price"
          },
          "id": {
            "type": "integer",
            "description": "Unique applied_price identifier"
          },
          "unit_price": {
            "type": "number",
            "description": "Applied unit price"
          },
          "price_level_name": {
            "type": "string",
            "description": "Price level name (attended, unattended, self, ...)"
          }
        },
        "description": "Applied price data output"
      },
      "productFamilyOutputArray": {
        "title": "product_family_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "market": {
              "type": "boolean",
              "description": "If True, the family is managed by the pos. False otherwise."
            },
            "code": {
              "type": "string",
              "description": "Product family code"
            },
            "name": {
              "type": "string",
              "description": "Product family name"
            },
            "id": {
              "type": "integer",
              "description": "Unique product family identifier"
            }
          }
        }
      },
      "vehicleOutputArray": {
        "title": "vehicle_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "is_enabled": {
              "type": "boolean",
              "description": "True if vehicle is active, false otherwise."
            },
            "enabled_articles": {
              "type": "array",
              "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "driver": {
              "type": "string",
              "description": "Vehicle's driver identifier"
            },
            "plate": {
              "type": "string",
              "description": "Vehicle's plate"
            },
            "model": {
              "type": "string",
              "description": "Vehicle's model"
            },
            "id": {
              "type": "integer",
              "description": "Unique vehicle identifier"
            },
            "customer_id": {
              "type": "integer",
              "description": "Customer owner of the vehicle"
            }
          }
        }
      },
      "residueCustomersOutput": {
        "title": "residue_customers_output",
        "type": "array",
        "description": "Residue Customers data output",
        "items": {
          "type": "object",
          "properties": {
            "residue_type": {
              "type": "integer",
              "description": "The type_id identify the tipologies of the cards: TypeId = 1: This cards is a monthly cards, TypeId = 2: This cards is a rechargeable cards"
            },
            "residue": {
              "type": "number",
              "description": "Residue of the cards"
            }
          }
        }
      },
      "paymentPeriodicityOutputArray": {
        "title": "payment_periodicity_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code of the payment periodicity<ul><li><strong>N</strong>: Immediata</li><li><strong>W</strong>: Settimanale</li><li><strong>D</strong>: Decade</li><li><strong>F</strong>: Quindicinale</li><li><strong>M</strong>: Mensile</li><li><strong>B</strong>: Bimestrale</li><li><strong>Q</strong>: Trimestrale</li><li><strong>X</strong>: Nessuna</li></ul>"
            },
            "electronic_invoice": {
              "type": "boolean",
              "description": "True if payment periodicity is available for electronic invoicing"
            },
            "name": {
              "type": "string",
              "description": "Name of the payment periodicity"
            },
            "id": {
              "type": "integer",
              "description": "Unique payment periodicity identifier"
            }
          }
        }
      },
      "cardOutput": {
        "title": "card_output",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Card code"
          },
          "can_outdoor": {
            "type": "boolean",
            "description": "True if the card can perform transactions outdoor, false otherwise"
          },
          "extra2": {
            "type": "string",
            "description": "Optional additional data field"
          },
          "max_period_credit": {
            "type": "number",
            "description": "Total credit of the card"
          },
          "extra1": {
            "type": "string",
            "description": "Optional additional data field"
          },
          "expire_datetime": {
            "type": "string",
            "description": "Card expire date",
            "format": "date-time"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if the card is enabled, false otherwise"
          },
          "daily_max_limit": {
            "type": "number",
            "description": "Daily usage limit of the card"
          },
          "can_indoor": {
            "type": "boolean",
            "description": "True if the card can perform transactions indoor, false otherwise"
          },
          "has_excise_duty": {
            "type": "boolean",
            "description": "True if the invoices binded to this card must report the excise duty amount, false otherwise"
          },
          "id": {
            "type": "integer",
            "description": "Unique card identifier"
          },
          "pan": {
            "maxLength": 50,
            "type": "string",
            "description": "PAN of the card"
          },
          "customer_code": {
            "type": "string",
            "description": "Code of the customer owner of the card (import export purpose)"
          },
          "vehicle_id": {
            "type": "integer",
            "description": "Vehicle linked to card"
          },
          "email": {
            "type": "string",
            "description": "Optional email linked to the card, used to send email after a transaction"
          },
          "type_id": {
            "type": "integer",
            "description": "Card type id.<br/>Possible values are:<ul><li>2 (prepaid card)</li><li>3 (discount card)</li><li>4 (fidelity/points card)</li><li>5 (end of month card)</li></ul>"
          },
          "cost_center_id": {
            "type": "string",
            "description": "Optional cost center id, whose the card is linked"
          },
          "has_km_request": {
            "type": "boolean",
            "description": "True if the customer has to digit the odometer value during a transaction, false otherwise"
          },
          "has_km_check": {
            "type": "boolean",
            "description": "True if the the system check the has_km_request value, false otherwise"
          },
          "delivery_datetime": {
            "type": "string",
            "description": "When the card is given to the customer",
            "format": "date-time"
          },
          "last_km_value": {
            "type": "integer",
            "description": "Last inserted odometer value"
          },
          "enabled_articles": {
            "type": "array",
            "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
            "items": {
              "type": "integer"
            }
          },
          "customer_id": {
            "type": "integer",
            "description": "Id of the customer owner of the card"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier owner of the card"
          },
          "supplier_code": {
            "type": "string",
            "description": "Code of the supplier owner of the card (import export purpose)"
          }
        },
        "description": "Card data output"
      },
      "supplierInput": {
        "title": "supplier_input",
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "invoice_header_id": {
            "type": "integer",
            "description": "Invoice header identifier. This is used to set data in the invoice created by this supplier."
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "protocol_id": {
            "type": "integer",
            "description": "Protocol identifier, used for supplier invoices"
          },
          "recharge_invoice": {
            "type": "boolean",
            "description": "If true, the system issues invoices for recharging operations. False otherwise."
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "generate_autoinvoice_td27": {
            "type": "boolean",
            "description": "If true, the system use document type 'TD27' for auto invoices. False otherwise."
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "True if supplier is active"
              },
              "max_deliverable": {
                "type": "number",
                "description": "Max deliverable amount in a single supply operation"
              },
              "auto_emission_account_balance": {
                "type": "boolean",
                "description": "If true, account balances are automatically created. False otherwise."
              },
              "logo": {
                "type": "string",
                "description": "Logo uri"
              },
              "max_rechargeable": {
                "type": "number",
                "description": "Max rechargeable amount in a single recharge operation"
              },
              "notification_date_reorder_legal_archiving_service": {
                "type": "string",
                "description": "",
                "format": "date-time"
              },
              "sign_space": {
                "type": "boolean",
                "description": "If true, pos prints the signing space at the bottom. False otherwise."
              }
            }
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "short_name": {
            "type": "string",
            "description": "Supplier portal name. This is the name showed in portal and apps."
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          },
          "fuel_coupon_invoice": {
            "type": "boolean",
            "description": "If true, the system issues invoices for fuel coupons creations. False otherwise."
          }
        },
        "description": "Supplier input data"
      },
      "articleOutput": {
        "title": "article_output",
        "type": "object",
        "properties": {
          "ignore_category_protocol": {
            "type": "boolean",
            "description": "True if invoices with this article can ignore the category protocol and use only the fuel station/supplier protocol, false otherwise"
          },
          "code": {
            "type": "string",
            "description": "Article code"
          },
          "notes": {
            "type": "string",
            "description": "Article optional notes"
          },
          "is_system_reserved": {
            "type": "boolean",
            "description": "True if the article automatically created, false otherwise"
          },
          "price_precision": {
            "type": "integer",
            "description": "Count of decimal numbers in the article price.<br/><i>Example</i>: If this field value is '3', a valid unit price is 1,234, while something like 1,23456 would be truncated to 1,234."
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if article is active, false otherwise"
          },
          "unity_of_measure_id": {
            "type": "integer",
            "description": "Unity of measure used to register transactions with this article"
          },
          "is_oil": {
            "type": "boolean",
            "description": "True if the article is an oil article, false otherwise"
          },
          "category_id": {
            "type": "integer",
            "description": "Category linked to which the article belongs"
          },
          "is_code": {
            "type": "integer",
            "description": "IS code assigned to OIL articles"
          },
          "name": {
            "type": "string",
            "description": "Article name"
          },
          "vat_id": {
            "type": "integer",
            "description": "Applied vat on the article"
          },
          "has_stamp_duty": {
            "type": "boolean",
            "description": "True if the article uses the stamp duty, false otherwise"
          },
          "id": {
            "type": "integer",
            "description": "Unique article identifier"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of the article"
          },
          "article_point_id": {
            "type": "integer",
            "description": "Id of optional points settings (for fidelity campaigns)"
          }
        },
        "description": "Article data output"
      },
      "userOutputArray": {
        "title": "user_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user_role": {
              "type": "integer",
              "description": "For Invoice&GO customer users, its value is <strong>0 for master users</strong> and <strong>1 for sub users</strong>."
            },
            "is_customer_iego": {
              "type": "boolean",
              "description": "True if the linked customer is an Invoice&GO customer, false otherwise"
            },
            "phone_number": {
              "type": "string",
              "description": "Phone number"
            },
            "id": {
              "type": "integer",
              "description": "Unique user identifier"
            },
            "customer_id": {
              "type": "integer",
              "description": "Optional customer id linked to this user"
            },
            "vehicle_id": {
              "type": "integer",
              "description": "Used to assign one specific vehicle to this user. When this is set, the user can use only this vehicle in Invoice&GO"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Optional supplier id linked to the customer"
            },
            "email": {
              "type": "string",
              "description": "Login email",
              "format": "email"
            },
            "internal_properties": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "True if user is active, false otherwise"
                },
                "father_user_id": {
                  "type": "integer",
                  "description": "User who created this user"
                },
                "identity_provider_id": {
                  "type": "integer",
                  "description": "Id assigned from the identity provider"
                },
                "user_level_id": {
                  "type": "integer",
                  "description": "Level of the user"
                }
              }
            }
          }
        }
      },
      "activeInvoiceAcceptRejectInput": {
        "title": "active_invoice_accept_reject_invoice_input",
        "type": "object",
        "properties": {
          "to_accept": {
            "type": "boolean",
            "description": "If true, the received ids will be accepted. They'll be rejected if false."
          },
          "is_details": {
            "type": "boolean",
            "description": "If true, the received ids refer to invoice details. If false, they refer to invoices."
          },
          "id": {
            "type": "array",
            "description": "Unique invoice identifier list",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": "Active invoice accept reject data input"
      },
      "cardLockInput": {
        "title": "Lock card request",
        "type": "object",
        "properties": {
          "is_lock_request": {
            "type": "string",
            "description": "If true, the request lock card. If false the request unlock card"
          },
          "customer_id": {
            "type": "string",
            "description": "Id of the customer"
          },
          "card_id": {
            "type": "string",
            "description": "Id of the card"
          }
        },
        "description": "info data for request of lock"
      },
      "invoiceHeaderInput": {
        "title": "invoice_header_input",
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Company country name"
          },
          "code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Company code"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "Company headquarter city"
          },
          "cab": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Company vat number"
          },
          "adm_code": {
            "maxLength": 7,
            "minLength": 6,
            "type": "string",
            "description": "Company sdi passive code"
          },
          "house_number": {
            "type": "string",
            "description": "Company house number"
          },
          "fiscal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Company fiscal code"
          },
          "zip_code": {
            "maxLength": 6,
            "minLength": 4,
            "type": "integer",
            "description": "Company headquarter zip code"
          },
          "pec": {
            "maxLength": 100,
            "type": "string",
            "description": "Company pec",
            "format": "email"
          },
          "rea_single_partner": {
            "type": "boolean",
            "description": "True if the society has an unique partner, false otherwise"
          },
          "province": {
            "maxLength": 2,
            "type": "string",
            "description": "Province code"
          },
          "rea_number": {
            "type": "string",
            "description": "The field must contain the number used to register the suppier to the 'ufficio registro imprese'."
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Company email",
            "format": "email"
          },
          "address": {
            "maxLength": 81,
            "type": "string",
            "description": "Company address"
          },
          "tax_regime_id": {
            "type": "integer",
            "description": "Tax regime used by the supplier"
          },
          "rea_share_capital": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "rea_liquidation": {
            "type": "boolean",
            "description": "True f the society is on liquidation, false otherwise"
          },
          "abi": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "is_join_stock_company": {
            "type": "string",
            "description": "True if this is a join stock company (spa, sapa, srl), false otherwise"
          },
          "fax_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company fax number"
          },
          "rea_province": {
            "type": "string",
            "description": "The field must contain the initials of the province of the 'ufficio registro imprese' where the supplier is registered."
          },
          "iban": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "name": {
            "maxLength": 81,
            "type": "string",
            "description": "Company complete name"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Company phone number"
          },
          "bic": {
            "type": "string",
            "description": "It is a data provided for by the legislation (art.2250 of the civil code) regarding the advertising obligations of companies"
          },
          "country_id": {
            "type": "integer",
            "description": "Company country id"
          }
        },
        "description": "Invoice header data input"
      },
      "patchActiveInvoiceHeaderOutput": {
        "title": "get_for_patch_active_invoice_header_output",
        "type": "object",
        "properties": {
          "issuing_datetime": {
            "type": "string",
            "description": "Date time when the invoice is issued",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the invoice"
          },
          "is_immediate": {
            "type": "boolean",
            "description": "True if the invoice is issued with immediate periodicity, false otherwise"
          },
          "is_from_selfnet": {
            "type": "boolean",
            "description": "True if the invoice refers to Selfnet (invoice generated by cards), false otherwise (Invoice&GO invoices)"
          },
          "fuel_station_id": {
            "type": "integer",
            "description": "Optional reference to the fuel station where the invoice is created. If this is NULL, supplier_id must be set."
          },
          "year": {
            "type": "integer",
            "description": "Year when the invoice is issued"
          },
          "customer_vat": {
            "type": "integer",
            "description": "Customer VAT who is the recipient of the invoice"
          },
          "fuel_station_name": {
            "type": "string",
            "description": "Name of the involved fuel station (if present)"
          },
          "is_oil": {
            "type": "boolean",
            "description": "True if the invoice contains only oil transactions, false if it contains only non oil transactions. NULL if it contains both of them."
          },
          "document_type_id": {
            "type": "string",
            "description": "Invoice type id.<br/>Possible values are:<ul><li><storng>TD01</strong>: Fattura immediata</li><li><storng>TD04</strong>: Nota di Credito</li><li><storng>TD17</strong>: Integrazione/autofattura per acquisto servizi dall’estero</li><li><storng>TD18</strong>: Integrazione per acquisto di beni intracomunitari</li><li><storng>TD19</strong>: Integrazione/autofattura per acquisto di beni ex art.17 c.2 DPR 633/72</li><li><storng>TD24</strong>: Fattura differita di cui all’art.21, comma 4, lett. a)</li><li><storng>TD27</strong>: Fattura per autoconsumo o per cessioni gratuite senza rivalsa</li></ul>"
          },
          "causal": {
            "type": "string",
            "description": "Invoice causal"
          },
          "id": {
            "type": "integer",
            "description": "Unique invoice identifier"
          },
          "customer_name": {
            "type": "integer",
            "description": "Customer name who is the recipient of the invoice"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer who is the recipient of the invoice"
          },
          "is_customer_split": {
            "type": "boolean",
            "description": "True if the customer is under split payment, false otherwise"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier who owns the invoice. In an active invoice, if this is NULL, fuel_station_id must be set."
          }
        },
        "description": "Get active invoice header output data"
      },
      "base64String": {
        "title": "base_64_string",
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "String value"
          }
        },
        "description": "A base64 string representing a file"
      },
      "protocolInput": {
        "title": "protocol_input",
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol used in invoice creation"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes"
          },
          "immediate_invoice_protocol": {
            "type": "string",
            "description": "Protocol used in <strong>immediate</strong> invoice creation"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of the protocol"
          }
        },
        "description": "Protocol data input"
      },
      "categoryOutputArray": {
        "title": "category_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "requires_fuel_station": {
              "type": "boolean",
              "description": "True if during invoice detail creation, the fuel station is mandatory. False otherwise"
            },
            "is_enabled": {
              "type": "boolean",
              "description": "True if category is active, false otherwise"
            },
            "code": {
              "type": "string",
              "description": "Category code"
            },
            "requires_vehicle": {
              "type": "boolean",
              "description": "True if during invoice detail creation, the vehicle is mandatory. False otherwise"
            },
            "name": {
              "type": "string",
              "description": "Category name"
            },
            "has_withholdilg": {
              "type": "boolean",
              "description": "True if the articles in this category have withholding. False otherwise"
            },
            "protocol_id": {
              "type": "integer",
              "description": "Optional invoice protocol linked to the category"
            },
            "id": {
              "type": "integer",
              "description": "Unique category identifier"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Supplier owner of the category"
            },
            "internal_properties": {
              "type": "object",
              "properties": {
                "is_oil": {
                  "type": "boolean",
                  "description": "True if the category contains oil articles. False otherwise"
                },
                "is_customer_cost": {
                  "type": "boolean",
                  "description": "True if this category is designed for the customer cost articles. False otherwise.<br/>Customer cost articles are used to add optional costs in the Selfnet invoices of one or more customers."
                }
              }
            }
          }
        }
      },
      "customerOutputArray": {
        "title": "customer_output_array",
        "type": "array",
        "description": "Customer data array",
        "items": {
          "type": "object",
          "properties": {
            "invoice_notes": {
              "type": "string",
              "description": "Invoice custom notes"
            },
            "country": {
              "type": "string",
              "description": "Company country name"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes"
            },
            "vat_number": {
              "maxLength": 20,
              "type": "string",
              "description": "Company vat number"
            },
            "notify_recharge": {
              "type": "boolean",
              "description": "True if the system sends an email to the customer to notify a recharge operation, false otherwise"
            },
            "fee": {
              "type": "boolean",
              "description": "ECommerce customer fee"
            },
            "discount_level": {
              "type": "integer",
              "description": "Customer discount level"
            },
            "house_number": {
              "type": "string",
              "description": "Company house number"
            },
            "max_period_credit": {
              "type": "number",
              "description": "Max credit"
            },
            "charge_discount": {
              "type": "number",
              "description": "Discount amount for recharging operations"
            },
            "zip_code": {
              "maxLength": 6,
              "minLength": 4,
              "type": "integer",
              "description": "Company headquarter zip code"
            },
            "pec": {
              "maxLength": 100,
              "type": "string",
              "description": "Company pec",
              "format": "email"
            },
            "province": {
              "maxLength": 2,
              "type": "string",
              "description": "Province code"
            },
            "has_driver_request": {
              "type": "boolean",
              "description": "True if the customer has to type the driver code when performing a transaction, false otherwise"
            },
            "ignore_payment_mode_on_pos": {
              "type": "boolean",
              "description": "If true ignores customer payment mode for POS recharges"
            },
            "vat_id": {
              "type": "integer",
              "description": "Customer vat"
            },
            "oil_iban": {
              "type": "string",
              "description": "If not empty, oil invoices uses this iban if needed"
            },
            "id": {
              "type": "integer",
              "description": "Unique customer identifier"
            },
            "has_driver_check": {
              "type": "boolean",
              "description": "True if the system check the driver code (it has to be an authorizative PIN), false otherwise"
            },
            "app_can_see_balance": {
              "type": "boolean",
              "description": "True if in the Selfnet mobile app user can see the customer credit, false otherwise"
            },
            "merge_invoices": {
              "type": "boolean",
              "description": "If True, OIL and NON OIL invoices are merged (where possible), false otherwise"
            },
            "is_without_vat": {
              "type": "boolean",
              "description": "If True, the customer has no VAT number"
            },
            "fax_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company fax number"
            },
            "internal_properties": {
              "type": "object",
              "properties": {
                "card_type_id": {
                  "type": "integer",
                  "description": "Only for Selfnet GT cards customers, shows the owner circuit.<br/>Possible valuesa are: <ul><li> 9 DKV</li><li>10 UTA</li><li>13 EWG</li><li>39 FAI</li><li>42 EDC (RADIUS)</li></ul>"
                },
                "registration_date": {
                  "type": "string",
                  "description": "Customer's registration date in the system",
                  "format": "date-time"
                },
                "parent_id": {
                  "type": "integer",
                  "description": "Parent client ID reverse change management"
                },
                "associated_supplier_id": {
                  "type": "integer",
                  "description": "For multisupplier, linked supplier"
                },
                "is_external_customer": {
                  "type": "boolean",
                  "description": "True if the customer is created by API called by third parties. Only used in GET endpoints"
                },
                "is_exported": {
                  "type": "boolean",
                  "description": "True if the customer is created and still never exported, false otherwise"
                },
                "type": {
                  "type": "string",
                  "description": "Customer type -> 'S': Society, 'P': Private"
                }
              }
            },
            "residue_type": {
              "type": "integer",
              "description": "Shows on the receipt card or customer residue"
            },
            "stamp_duty": {
              "type": "boolean",
              "description": "If true invoices have stamp duty when numbers permits it"
            },
            "exposure": {
              "type": "number",
              "description": "Issued invoices still not payed"
            },
            "name": {
              "maxLength": 81,
              "type": "string",
              "description": "Company complete name"
            },
            "sdi_code": {
              "maxLength": 7,
              "minLength": 6,
              "type": "string",
              "description": "SDI code used to receive electronic invoices"
            },
            "phone_number": {
              "maxLength": 50,
              "type": "string",
              "description": "Company phone number"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Supplier owner of customer data (not set for I&GO customers)"
            },
            "discount_group_id": {
              "type": "integer",
              "description": "Discount group identifier"
            },
            "country_id": {
              "type": "integer",
              "description": "Company country id"
            },
            "non_oil_iban": {
              "type": "string",
              "description": "If not empty, non oil invoices uses this iban if needed"
            },
            "birthday": {
              "type": "string",
              "description": "Customer birthday date",
              "format": "date-time"
            },
            "notify_2": {
              "type": "boolean",
              "description": "True if the system sends an email to secondary customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
            },
            "code": {
              "maxLength": 6,
              "minLength": 4,
              "type": "string",
              "description": "Company code"
            },
            "notify_3": {
              "type": "boolean",
              "description": "True if the system sends an email to third customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
            },
            "gender": {
              "type": "string",
              "description": "Customer gender"
            },
            "has_customer_recharge": {
              "type": "boolean",
              "description": "True if the recharge operations increase the customer credit,False if they increase the credit of the single involved card."
            },
            "city": {
              "maxLength": 30,
              "type": "string",
              "description": "Company headquarter city"
            },
            "notify_1": {
              "type": "boolean",
              "description": "True if the system sends an email to main customer email address, false otherwise.<br/>If the field notify (or the field notify_recharge) is set to False, this value is ignored."
            },
            "adm_code": {
              "maxLength": 7,
              "minLength": 6,
              "type": "string",
              "description": "Company sdi passive code"
            },
            "fiscal_code": {
              "maxLength": 20,
              "type": "string",
              "description": "Company fiscal code"
            },
            "nexi_configuration": {
              "type": "string",
              "description": "ECommerce configuration"
            },
            "notify": {
              "type": "boolean",
              "description": "True if the system sends an email to the customer to notify his operations, false otherwise"
            },
            "article_id": {
              "type": "integer",
              "description": "Article id to add costs to the customer invoice"
            },
            "is_enabled": {
              "type": "boolean",
              "description": "True if customer is active, false otherwise"
            },
            "has_account_balance": {
              "type": "boolean",
              "description": "True if the system generates the account balance for this customer, false otherwise"
            },
            "enabled_vehicles": {
              "type": "array",
              "description": "Enabled vehicles ids, lookup for vehicle details using /vehicles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "electronic_invoice": {
              "type": "boolean",
              "description": "True if the customer use the ICAD Sistemi electronic invoice"
            },
            "start_invoice_date": {
              "type": "string",
              "description": "For Selfnet customer, represents the electronic invoice starting dateIf NULL, invoices start when the field electronic_invoice is activated",
              "format": "date"
            },
            "payment_terms_id": {
              "type": "integer",
              "description": "Payment terms identifier. It is used only for Selfnet customers<br/> Possible values are:<ul><li>2\t5 gg data fattura</li><li>3\t15 gg data fattura</li><li>4\t30 gg fine mese data fattura</li><li>5\t60 gg fine mese data fattura</li><li>6\t90 gg fine mese data fattura</li><li>22\tData Fattura</li><li>23\t25 gg data fattura</li><li>26\t30 gg data fattura</li><li>27\t45 gg data fattura</li><li>28\t35 gg data fattura</li><li>29\t40 gg data fattura</li><li>30\t60 gg fine mese + 12gg</li><li>31\t30 gg fine mese + 12gg</li><li>32\t20 gg data fattura</li><li>33\t30 gg fine mese +  8gg</li><li>34\t60 gg fine mese + 10gg</li><li>35\t30 gg fine mese +  5gg</li><li>36\t30 gg fine mese + 10gg</li><li>37\t60 gg fine mese + 15gg</li><li>38\t10 gg data fattura</li><li>39\t30 gg fine mese + 15gg</li><li>40\t60 gg fine mese +  5gg</li><li>41\t60 gg data fattura</li><li>42\t90 gg fine mese + 10gg</li><li>43\t90 gg data fattura</li></ul>"
            },
            "email": {
              "maxLength": 100,
              "type": "string",
              "description": "Company email",
              "format": "email"
            },
            "address": {
              "maxLength": 81,
              "type": "string",
              "description": "Company address"
            },
            "payment_mode_id": {
              "type": "string",
              "description": "Payment mode identifier.<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
            },
            "has_km_request": {
              "type": "boolean",
              "description": "True if the customer has to type the km value when performing a transaction, false otherwise"
            },
            "has_invoice": {
              "type": "boolean",
              "description": "True if the customer needs to invoice his transactions, false otherwise"
            },
            "has_km_check": {
              "type": "boolean",
              "description": "True if the system check the value of the field has_km_request, false otherwise"
            },
            "price_list_id": {
              "type": "integer",
              "description": "Price list identifier linked to this customer"
            },
            "payment_periodicity_id": {
              "type": "string",
              "description": "Payment periodicity identifier.<br/>Possible values are:<ul><li><strong>N</strong> Immediata (both for Invoice&GO and Selfnet customers)</li><li><strong>W</strong> Settimanale (only for Selfnet customers)</li><li><strong>D</strong> \tDecade (only for Selfnet customers)</li><li><strong>F</strong> \tQuindicinale (only for Selfnet customers)</li><li><strong>M</strong> \tMensile (both for Invoice&GO and Selfnet customers)</li><li><strong>B</strong> \tBimestrale (only for Selfnet customers)</li><li><strong>Q</strong> \tTrimestrale (only for Selfnet customers)</li><li><strong>X</strong> \tNessuna (only for Selfnet customers)</li></ul>"
            },
            "enabled_articles": {
              "type": "array",
              "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "has_split_payment": {
              "type": "boolean",
              "description": "True if the customer use the split payment, false otherwise"
            }
          }
        }
      },
      "cardInputArray": {
        "title": "card_input_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "Card code"
            },
            "can_outdoor": {
              "type": "boolean",
              "description": "True if the card can perform transactions outdoor, false otherwise"
            },
            "type_id": {
              "type": "integer",
              "description": "Card type id.<br/>Possible values are:<ul><li>2 (prepaid card)</li><li>3 (discount card)</li><li>4 (fidelity/points card)</li><li>5 (end of month card)</li></ul>"
            },
            "cost_center_id": {
              "type": "string",
              "description": "Optional cost center id, whose the card is linked"
            },
            "has_km_request": {
              "type": "boolean",
              "description": "True if the customer has to digit the odometer value during a transaction, false otherwise"
            },
            "extra2": {
              "type": "string",
              "description": "Optional additional data field"
            },
            "max_period_credit": {
              "type": "number",
              "description": "Total credit of the card"
            },
            "has_km_check": {
              "type": "boolean",
              "description": "True if the the system check the has_km_request value, false otherwise"
            },
            "extra1": {
              "type": "string",
              "description": "Optional additional data field"
            },
            "expire_datetime": {
              "type": "string",
              "description": "Card expire date",
              "format": "date-time"
            },
            "delivery_datetime": {
              "type": "string",
              "description": "When the card is given to the customer",
              "format": "date-time"
            },
            "last_km_value": {
              "type": "integer",
              "description": "Last inserted odometer value"
            },
            "is_enabled": {
              "type": "boolean",
              "description": "True if the card is enabled, false otherwise"
            },
            "daily_max_limit": {
              "type": "number",
              "description": "Daily usage limit of the card"
            },
            "can_indoor": {
              "type": "boolean",
              "description": "True if the card can perform transactions indoor, false otherwise"
            },
            "enabled_articles": {
              "type": "array",
              "description": "Enabled articles ids, lookup for article details using /articles/{id} endpoint",
              "items": {
                "type": "integer"
              }
            },
            "has_excise_duty": {
              "type": "boolean",
              "description": "True if the invoices binded to this card must report the excise duty amount, false otherwise"
            },
            "customer_id": {
              "type": "integer",
              "description": "Id of the customer owner of the card"
            },
            "pan": {
              "maxLength": 50,
              "type": "string",
              "description": "PAN of the card"
            },
            "supplier_id": {
              "type": "integer",
              "description": "Id of the supplier owner of the card"
            },
            "supplier_code": {
              "type": "string",
              "description": "Code of the supplier owner of the card (import export purpose)"
            },
            "customer_code": {
              "type": "string",
              "description": "Code of the customer owner of the card (import export purpose)"
            },
            "vehicle_id": {
              "type": "integer",
              "description": "Vehicle linked to card"
            },
            "email": {
              "type": "string",
              "description": "Optional email linked to the card, used to send email after a transaction"
            }
          }
        }
      },
      "residueLogOutputArray": {
        "title": "residue_log_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "residue_new": {
              "type": "number",
              "description": "Residue after the transfer/reset"
            },
            "datetime": {
              "type": "string",
              "description": "Timestamp of the operation",
              "format": "date-time"
            },
            "source_card_pan": {
              "type": "string",
              "description": "Pan of the source card in a transfer"
            },
            "target_card_code": {
              "type": "string",
              "description": "Code of the target card in a transfer"
            },
            "source_card_code": {
              "type": "string",
              "description": "Code of the source card in a transfer"
            },
            "target_card_pan": {
              "type": "string",
              "description": "Pan of the target card in a transfer"
            },
            "id": {
              "type": "integer",
              "description": "Id of the record"
            },
            "customer_name": {
              "type": "string",
              "description": "Name of the involved customer"
            },
            "last_action": {
              "type": "string",
              "description": "The operation perfomed (transfer or reset)"
            },
            "customer_code": {
              "type": "string",
              "description": "Code of the involved code"
            },
            "user": {
              "type": "integer",
              "description": "Username of the user who made the operation"
            },
            "residue_old": {
              "type": "number",
              "description": "Residue before the transfer/reset"
            }
          }
        }
      },
      "productFamilyInput": {
        "title": "product_family_input",
        "type": "object",
        "properties": {
          "market": {
            "type": "boolean",
            "description": "If True, the family is managed by the pos. False otherwise."
          },
          "code": {
            "type": "string",
            "description": "Product family code"
          },
          "name": {
            "type": "string",
            "description": "Product family name"
          }
        },
        "description": "Product family data input"
      },
      "categoryOutput": {
        "title": "category_output",
        "type": "object",
        "properties": {
          "requires_fuel_station": {
            "type": "boolean",
            "description": "True if during invoice detail creation, the fuel station is mandatory. False otherwise"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "True if category is active, false otherwise"
          },
          "code": {
            "type": "string",
            "description": "Category code"
          },
          "requires_vehicle": {
            "type": "boolean",
            "description": "True if during invoice detail creation, the vehicle is mandatory. False otherwise"
          },
          "name": {
            "type": "string",
            "description": "Category name"
          },
          "has_withholdilg": {
            "type": "boolean",
            "description": "True if the articles in this category have withholding. False otherwise"
          },
          "protocol_id": {
            "type": "integer",
            "description": "Optional invoice protocol linked to the category"
          },
          "id": {
            "type": "integer",
            "description": "Unique category identifier"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier owner of the category"
          },
          "internal_properties": {
            "type": "object",
            "properties": {
              "is_oil": {
                "type": "boolean",
                "description": "True if the category contains oil articles. False otherwise"
              },
              "is_customer_cost": {
                "type": "boolean",
                "description": "True if this category is designed for the customer cost articles. False otherwise.<br/>Customer cost articles are used to add optional costs in the Selfnet invoices of one or more customers."
              }
            }
          }
        },
        "description": "Category data output"
      },
      "invoiceBodyOutputArray": {
        "title": "invoice_body_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "fuel_station_id": {
              "type": "integer",
              "description": "Optional fuel station id involved"
            },
            "notes": {
              "type": "string",
              "description": "Transaction notes"
            },
            "vehicle_plate": {
              "type": "string",
              "description": "Vehicle plate"
            },
            "payments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount payed with this payment method"
                  },
                  "payment_method_code": {
                    "type": "string",
                    "description": "Payment method code<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
                  },
                  "cab": {
                    "type": "string",
                    "description": "If the used payment method requires is (example: wire transfer), it contains the involved cab"
                  },
                  "iban": {
                    "type": "string",
                    "description": "If the used payment method requires is (example: wire transfer), it contains the involved iban"
                  },
                  "abi": {
                    "type": "string",
                    "description": "If the used payment method requires is (example: wire transfer), it contains the involved abi"
                  },
                  "id": {
                    "type": "integer",
                    "description": "Unique payment data identifier"
                  },
                  "bic": {
                    "type": "string",
                    "description": "If the used payment method requires is (example: wire transfer), it contains the involved bic"
                  }
                }
              }
            },
            "ddt_number": {
              "type": "string",
              "description": "DDT number associated to the transaction"
            },
            "vehicle_model": {
              "type": "string",
              "description": "Vehicle model"
            },
            "article_id": {
              "type": "integer",
              "description": "Purchased article id"
            },
            "is_oil": {
              "type": "boolean",
              "description": "True if the transaction refers to OIL article, false otherwise"
            },
            "vat_amount": {
              "type": "number",
              "description": "Vat amount applied to the taxable amount"
            },
            "credit_note_detail_id": {
              "type": "integer",
              "description": "Optional credit note detail id (used when this transaction is reversed)"
            },
            "unit_of_measure": {
              "type": "string",
              "description": "Unit of measure used"
            },
            "invoice_id": {
              "type": "integer",
              "description": "Reference to invoice where this record is included"
            },
            "vat_id": {
              "type": "integer",
              "description": "Vat rate user for this transaction"
            },
            "id": {
              "type": "integer",
              "description": "Unique invoice detail identifier"
            },
            "decrement_total": {
              "type": "boolean",
              "description": "If true, decrements transaction amount from the total. False otherwise."
            },
            "vehicle_id": {
              "type": "integer",
              "description": "Vehicle ID"
            },
            "taxable_amount": {
              "type": "number",
              "description": "Taxable amout of this transaction"
            },
            "transaction_id": {
              "type": "string",
              "description": "Transaction ID from station PC"
            },
            "km": {
              "type": "integer",
              "description": "Optional odometer value"
            },
            "quantity": {
              "type": "number",
              "description": "Quantity of the purchased article"
            },
            "article_description": {
              "type": "string",
              "description": "Name of the purchased article"
            },
            "discount_increase": {
              "type": "number",
              "description": "0 if there is no discount on the transaction's total amount. "
            },
            "transaction_timestamp": {
              "type": "string",
              "description": "Transaction datetime",
              "format": "date-time"
            },
            "unit_price": {
              "type": "number",
              "description": "Unit price of the purchased article"
            },
            "detail_status_code": {
              "type": "string",
              "description": "Current status of this record. It can be SF01 (to be approved), SF02 (approved) or SF12 (manually rejected)"
            },
            "card_id": {
              "type": "integer",
              "description": "Optional card involved in this transaction"
            },
            "article_code": {
              "type": "string",
              "description": "Code of the purchased article"
            },
            "receipt_number": {
              "type": "string",
              "description": "Associated ticket id"
            },
            "insert_invoice_mode_id": {
              "type": "integer",
              "description": "Identifies transaction's origin. Possibile values:<br/><ul><li>1: manual insert by manager</li><li>2: manual insert by the customer</li><li>3: from station PC</li><li>4: from Self, by customer with ticket number</li><li>: Selfnet transaction</li></ul>"
            },
            "total_amount": {
              "type": "number",
              "description": "Total gros amount of this transaction"
            },
            "user_id": {
              "type": "integer",
              "description": "Id of the user who created this transaction in the invoice"
            },
            "image_data": {
              "type": "string",
              "description": "Optional attached receipt image"
            },
            "fuel_station_address": {
              "type": "string",
              "description": "Address of the involved fuel station (if present)"
            }
          }
        }
      },
      "cardRangeInput": {
        "title": "card_range_input",
        "type": "object",
        "properties": {
          "range_end": {
            "type": "integer",
            "description": "Final id for massive card creation"
          },
          "range_start": {
            "type": "integer",
            "description": "Initial id for massive card creation"
          },
          "has_excise_duty": {
            "type": "boolean",
            "description": "True if the invoices binded to this card must report the excise duty amount, false otherwise"
          },
          "customer_id": {
            "type": "integer",
            "description": "Id of the customer owner of the card"
          },
          "expire_datetime": {
            "type": "string",
            "description": "Card expire date",
            "format": "date-time"
          },
          "supplier_id": {
            "type": "integer",
            "description": "Id of the supplier owner of the card"
          },
          "delivery_datetime": {
            "type": "string",
            "description": "When the card is given to the customer",
            "format": "date-time"
          }
        },
        "description": "Card range data input"
      },
      "cardUnlockHistoryOutput": {
        "title": "card_unlock_history_output",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "lock_datetime": {
              "type": "string",
              "description": "Datetime of lock event",
              "format": "date-time"
            },
            "card_code": {
              "type": "integer",
              "description": "card code number"
            },
            "unlock_datetime": {
              "type": "string",
              "description": "Datetime of unlock event",
              "format": "date-time"
            },
            "card_pan": {
              "type": "string",
              "description": "card pan"
            },
            "id": {
              "type": "integer",
              "description": "Unique card unlock event identifier"
            },
            "customer_name": {
              "type": "string",
              "description": "Customer name"
            },
            "customer_id": {
              "type": "integer",
              "description": "Customer id identifier"
            },
            "customer_code": {
              "type": "string",
              "description": "Customer code "
            },
            "card_id": {
              "type": "integer",
              "description": "Unique card identifier"
            },
            "username": {
              "type": "string",
              "description": "Username that requested unlock or lock on card"
            }
          }
        }
      },
      "cardUnLockInput": {
        "title": "UnLock card request",
        "type": "object",
        "properties": {
          "is_lock_request": {
            "type": "string",
            "description": "If true, the request lock card. If false the request unlock card"
          },
          "customer_id": {
            "type": "string",
            "description": "Id of the customer"
          },
          "card_id": {
            "type": "string",
            "description": "Id of the card"
          }
        },
        "description": "info data for request of Unlock"
      },
      "paymentModeOutputArray": {
        "title": "payment_mode_output_array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "use": {
              "type": "string",
              "description": "Payment mode name"
            },
            "name": {
              "type": "string",
              "description": "Payment mode name"
            },
            "sdi_code": {
              "type": "string",
              "description": "Code used by SDI to idenfy this payment mode.<br/>Possible values are:<ul><li><strong>MP01</strong>: Contanti</li><li><strong>MP02</strong>: Assegno</li><li><strong>MP03</strong>: assegno circolare</li><li><strong>MP04</strong>: contanti presso Tesoreria</li><li><strong>MP05</strong>: Bonifico</li><li><strong>MP06</strong>: vaglia cambiario</li><li><strong>MP07</strong>: bollettino bancario</li><li><strong>MP08</strong>: Carta di pagamento</li><li><strong>MP09</strong>: RID</li><li><strong>MP10</strong>: RID utenze</li><li><strong>MP11</strong>: RID veloce</li><li><strong>MP12</strong>: Ricevuta bancaria</li><li><strong>MP13</strong>: MAV</li><li><strong>MP14</strong>: quietanza erario stato</li><li><strong>MP15</strong>: giroconto su conti di contabilità speciale</li><li><strong>MP16</strong>: domiciliazione bancaria</li><li><strong>MP17</strong>: domiciliazione postale</li><li><strong>MP18</strong>: Bollettino di c/c postale</li><li><strong>MP19</strong>: SEPA Direct Debit</li><li><strong>MP20</strong>: SEPA Direct Debit CORE</li><li><strong>MP21</strong>: SEPA Direct Debit B2B</li><li><strong>MP22</strong>: Trattenuta su somme già riscosse</li><li><strong>MP23</strong>: PagoPA</li></ul>"
            },
            "needs_bank_coordinates": {
              "type": "string",
              "description": "Payment mode name"
            },
            "id": {
              "type": "integer",
              "description": "Unique payment mode identifier"
            }
          }
        }
      },
      "userPrivacy": {
        "title": "user_privacy",
        "type": "object",
        "properties": {
          "app_privacy": {
            "type": "boolean",
            "description": "App privacy acceptance"
          },
          "terms_and_conditions": {
            "type": "boolean",
            "description": "Terms and conditions acceptance"
          },
          "marketing": {
            "type": "boolean",
            "description": "Marketing acceptance"
          },
          "third_parties": {
            "type": "boolean",
            "description": "Third parties acceptance"
          }
        },
        "description": "User privacy data settings"
      },
      "getTransactionDetailByQrInput": {
        "title": "getTransactionDetailByQrInput",
        "x-stoplight": {
          "id": "ulo6pmjc14vxi"
        },
        "type": "object",
        "properties": {
          "fuelstation_id": {
            "type": "integer",
            "description": "Fuel station ID, it could be empty\n"
          },
          "payload": {
            "type": "string"
          },
          "automation": {
            "type": "string"
          }
        }
      },
      "upsertManagers": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "id": 3,
            "code": "009",
            "supplier_id": 1,
            "name": "Gestore 1",
            "address": "Via Aires 45",
            "region": 1,
            "province": 1,
            "city": 272,
            "zipcode": "",
            "telephone": "",
            "email": "paolo.deandreis@icadsistemi.com",
            "note": "",
            "vat": 21.99,
            "fiscal_code": "",
            "is_enabled": true,
            "edit_datetime": "2024-08-19T14:43:00Z",
            "edit_user": "paolo.deandreis@icadsistemi.com",
            "is_manager": true,
            "margin": 4.27893
          }
        },
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "supplier_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "region": {
            "type": "integer"
          },
          "province": {
            "type": "integer"
          },
          "city": {
            "type": "integer"
          },
          "zipcode": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "vat": {
            "type": "number"
          },
          "fiscal_code": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_manager": {
            "type": "boolean"
          },
          "margin": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "upsertManagerFuelstations": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "managerFuelstationID": 0,
            "iscode": "IS318077",
            "isEnabled": true
          }
        },
        "properties": {
          "managerFuelstationID": {
            "type": "integer"
          },
          "iscode": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "managerFuelstationID",
          "iscode"
        ]
      },
      "upsertTanksReconciliationsConfiguration": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "id": 0,
            "product_family_id": 0,
            "supplier_id": 0,
            "deficiency": 0,
            "surplus": 0
          }
        },
        "properties": {
          "id": {
            "type": "integer"
          },
          "product_family_id": {
            "type": "integer"
          },
          "supplier_id": {
            "type": "integer"
          },
          "deficiency": {
            "type": "number"
          },
          "surplus": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "product_family_id",
          "supplier_id"
        ]
      },
      "upsertManagerFuelstationArticles": {
        "type": "object",
        "x-examples": {
          "Example 1": {
            "manager_fuelstation_article_id": 0,
            "article_id": 1,
            "level_price_id": 34,
            "quote": 2
          }
        },
        "properties": {
          "manager_fuelstation_article_id": {
            "type": "integer"
          },
          "article_id": {
            "type": "integer"
          },
          "level_price_id": {
            "type": "integer"
          },
          "quote": {
            "type": "integer"
          }
        },
        "required": [
          "manager_fuelstation_article_id"
        ]
      }
    },
    "securitySchemes": {
      "api_key": {
        "name": "API Key",
        "type": "apiKey",
        "in": "header"
      },
      "cognito": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        }
      }
    }
  },
  "x-internal": false
}